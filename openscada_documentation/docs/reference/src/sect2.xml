<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://docbook.org/xml/4.4/docbookx.dtd" []>

<sect1 id="getting_started"><title>Getting Started</title>
	<para>
		This section should aid you in getting ready to develop for or with <trademark>OpenSCADA</trademark>. 
	</para>
	
	<sect2><title>Creating applications based on OpenSCADA</title>
	
	<sect3><title>Setting up your development environment</title>
		<para>
			In order to develop applications that use OpenSCADA you need some a binary distribution
			and optionally source code attachments or JavaDoc.
		</para>
		<para>
			Generally the download page for <quote>ready to build</quote> stuff is at
			<uri>http://download.openscada.org</uri> and for repositories at
			<uri>http://repo.openscada.org</uri>.  
		</para>
		<para>
			The next few sections explain the different approaches one can take in
			order to set up your development environment.
		</para>
		
		<sect4><title>The Maven Way</title>
			<para>
				One word in advance: Although this section features a setup using Maven 2, it
				is of course also possible (with some drawbacks) to use this setup using
				Eclipse and the M2Eclipse Plugin (possibly also using the Eclipse IAM Plugin).
			</para>
			<para>
				Add the maven repository <uri>http://repo.openscada.org/maven2</uri> to your
				<filename>pom.xml</filename> you are basically set up.
			</para>
			<para>
				If you want to develop using Eclipse, we have one little helper tool which
				might aid you a lot in adding the OSGi Bundles from your Maven repository to
				your target platform. In the Update Site <uri>http://repo.openscada.org/eclipse</uri>
				we have the <quote>Local Maven Repository Provisioner</quote> which adds all
				OSGi Bundles found in your local maven repository (or any other path) to the
				selected target platform. Although the import has to be cleared and re-added once
				new versions or modules are available and the maven repository has to be populated
				<emphasis>before</emphasis> using the plugin, it eases the use of maven in Eclipse
				a lot.
				<note><para>
				This only works with OSGi bundles and not with plain jar files. Although
				OSGi bundles might look like plain jar files!
				</para></note>
			</para>
		</sect4>
		
		<sect4><title>The Eclipse Way</title>
			<para>
				The Eclipse way is a straight forward P2 repository setup. You will need to
				perform the following steps:
				<orderedlist>
					<listitem>
						<para>Download and Install Eclipse 3.4 or 3.5</para>
					</listitem>
					<listitem>
						<para>
							Add the P2 Repository <uri>http://repo.openscada.org/p2/integration/base</uri>
							for the intgeration repository and
							<uri>http://repo.openscada.org/p2/release/base</uri> for the release
							repository. In order to do this open the Preferences and navigate to 
							<guimenu>Plug-In Development</guimenu><guisubmenu>Target Platform</guisubmenu>
							and create a new Target Platform by clicking <guibutton>Add...</guibutton>.
							Start with a default target platform and add a new <quote>Software Site</quote>.
							<note>
								<para>
								When adding the software site be sure to disable the option
								<guilabel>Include required software</guilabel> as seen in screen
								<mediaobject>
									<imageobject>
   									<imagedata fileref="images/sect2/p2_settings.png" format="PNG" scalefit="1"/>
 									</imageobject>
 									<caption>P2 Import Settings</caption>
								</mediaobject>
								</para>
							</note>
						</para>
					</listitem>
					<listitem>
						<para>
							Set up a new target platform and add all components from the P2
							repository added in the previous step.
						</para>
					</listitem>
					<listitem>
						<para>Your are ready to work!</para>
					</listitem>
				</orderedlist>
			</para>
		</sect4>
	
	</sect3>
	
	<sect3><title>Creating a first DA client application</title>
		<para>
		</para>
		
		<sect4><title>Dependencies</title>
			<para>
				You will need the following modules and their dependencies:
				<itemizedlist>
					<listitem><para>org.openscada.da.client.common</para></listitem>
				</itemizedlist>
				Additionally you will need one of the following dependencies at runtime:
				<itemizedlist>
					<listitem><para>org.openscada.da.client.net</para></listitem>
					<listitem><para>org.openscada.da.client.ice</para></listitem>
				</itemizedlist>
			</para>
		</sect4>
		
		<sect4><title>Project setup</title>
			<para>
				We just need a simple java project with a main method. Although
				other scenarios are possible we will keep it simple.
			</para>
		</sect4>
		
		<sect4><title>Sample</title>
			<para>
				The following sample will create a new connection to an OpenSCADA DA Server
				(aka <quote>Hive</quote>) and subscribe to the dataitem <filename>time</filename>.
				It will then sleep for 10 seconds to give the data item time to trigger some
				updates which are printed to the console.
			</para>
			<para>
				The main class will look something like this:

<example><title><function>SampleClient1</function></title>
				<programlisting language="Java">
import org.openscada.core.Variant;
import org.openscada.da.client.Connection;
import org.openscada.da.client.DataItem;
import org.openscada.da.client.DataItemValue;
import org.openscada.da.client.ItemManager;

public class Client
{
	public static int main ( String [] args ) throws Exception
	{
		Class.forName ( "org.openscada.da.client.net.Connection" ); <co id="sample1.1"/>
		ConnectionInformation connectionInformation =
			ConnectionInformation.fromURI ( "da:net://localhost:1202" );

        Connection connection =
        	(Connection)ConnectionFactory.create ( connectionInformation );
        
        ItemManager itemManager = new ItemManager ( connection ); <co id="sample1.3"/>
        
        DataItem item = new DataItem ( "time", itemManager ); <co id="sample1.4"/>
        item.addObserver ( new Observer () { <co id="sample1.5"/>
        	public void update ( Observable o, Object arg )
        	{
        		DataItem item = (DataItem)o;
        		DataItemValue updateValue = (DataItemValue)arg;
        		System.out.println ( "Current value: " + updateValue );
        	}
        });
        
        connection.connect (); <co id="sample1.2"/>
        
        Thread.sleep ( 10000 ); <co id="sample1.6"/>
	}
}
				</programlisting>
				<calloutlist>
					<callout arearefs="sample1.1">
						<para>Pre-load the connection class</para>
					</callout>
					<callout arearefs="sample1.2">
						<para>
						Start connecting to the server. After the connection
						has been established the first real notification will
						trigger the listener.
						</para>
					</callout>
					<callout arearefs="sample1.3">
						<para>
						Bind the item manager to the connection. Only
						one item manager must be connected to a connection
						at a time.
						</para>
					</callout>
					<callout arearefs="sample1.4">
						<para>
						Create an item subscription to the item <filename>test</filename>
						and bind it to the item manager. Each item manager can handle
						serveral items at once and also allows multiple subscriptions
						of the same item.
						</para>
					</callout>
					<callout arearefs="sample1.5">
						<para>
						Connect a listener to the dataitem in order to get notifications.
						</para>
					</callout>
					<callout arearefs="sample1.6">
						<para>
						Sleep in order to allow the registered data item to show some
						notifications. Otherwise the client would exit and close the connection
						without showing much information.
						</para>
					</callout>
					
				</calloutlist>
</example>

			</para>
			
			<para>
				
			</para>
		</sect4>
	</sect3>
	
	<sect3><title>Creating a first DA server application</title>
		<para></para>
	</sect3>
	
	</sect2>
	
	<sect2><title>Developing for OpenSCADA</title>
		<para>to be written</para>
	</sect2>
</sect1>