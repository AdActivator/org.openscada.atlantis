<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://docbook.org/xml/4.4/docbookx.dtd" []>

<chapter id="introduction"><title>Introduction</title>
	<para>
		The following sections give you a short introduction into OpenSCADA.   		
  	</para>
  	
<sect1 id="overview"><title>Overview and Purpose</title>
	<para>
	This document describes the different components of OpenSCADA from a users point of view.
	</para>
</sect1>
  	
<sect1 id="quickStart"><title>Quick Start</title>
	<para>
	This section is intended to give you a really quick start in some of the
	<trademark>OpenSCADA</trademark> functionality.
	</para>
 		
<sect2 id="quickStart_ostc"><title>Test Client</title>
	<para>
	There is a test client called <filename>OSTC</filename>. Its purpose is to aid testing
	and performing generic tasks. It is not a <quote>end user client</quote>.
	</para>
	
	<sect3><title>Installation &amp; setup</title>
	
	<para>
	See section <xref linkend="ostc_install"/> on how to install <filename>OSTC</filename>.
	Once you have it up and running perform the following steps:
	
	<itemizedlist>
		<listitem>
		<para>Start the application</para>
		</listitem>
		<listitem>
		<para>Switch to the <quote>DA</quote> perspective</para>
		</listitem>
		<listitem>
		<para>Right click on the <quote>Default File Source</quote> entry in
		the <quote>Navigator</quote></para>
		</listitem>
		<listitem>
		<para>Add two new URIs: <uri>da:net://localhost:1202</uri> and <uri>da:net://localhost:1203</uri>
		</para>
		</listitem>
		<listitem>
		<para>
		Start the two simulation servers from the <quote>Testing</quote> menu
		<footnote>
		<para>The two test servers use the TCP port number 1202 and 1203. You need to ensure that
		the application has the permissions by the operating system (or your local firewall) to open
		these ports in listen mode. Also you need to ensure that these ports are available and not used
		by other applications. You can change the port numbers in the preferences dialog. Of course
		you need to change the URIs as well.
		</para>
		</footnote>
		</para>
		</listitem>
		<listitem>
		<para>Right click on the previously created <acronym>URI</acronym> entries and
		issue the <quote>Connect</quote> command
		</para>
		</listitem>
	</itemizedlist>
	
	You can now browse through the items provided by the connected DA server.
	</para>
</sect3>

<sect3><title>Playing with the memory items</title>
	<para>
	There are some <quote>memory items</quote> which can be used to play around with. Data written
	to these items will be feed in back as input. These items support both read and write operations.
	</para>
	
	<para>
	<itemizedlist>
	
	<listitem>
	<para>Ensure that are switched to the DA perspective and have one real time list and the
	navigator visible. Also ensure that you have the testing servers running as described earlier.</para>
	</listitem>
	
	<listitem>
	<para>Open the connection to <uri>da:net://localhost:1203</uri></para>
	</listitem>
	
	<listitem>
	<para>Navigate to the <filename>memory-cell</filename> folder and right click on the
	<filename>control</filename> item.
	</para>
	</listitem>
	
	<listitem>
	<para>Issue a write command and write a positive integer number not too big (e.g. 10)</para>
	</listitem>
	
	<listitem>
	<para>After the write command there should appear exactly the amount of memory items
	you requested in your write command</para>
	</listitem>
	
	<listitem>
	<para>Drag and drop some of these new items to the real time list. They should appear in
	the real time list with the ID <filename>memory-cell-X</filename> where X is the
	number of the memory item used.
	</para>
	</listitem>
	
	<listitem>
	<para>The items in the real time list should have the status <quote>CONNECTED</quote>
	and a value of <quote>NULL</quote>
	</para>
	</listitem>
	
	<listitem>
	<para>Right click on one item in the real time list and issue another write command.
	Write any value you like. The value should be provided by the data item after the
	write command completed</para>
	</listitem>
	
	</itemizedlist>
	
	This gives you a short introduction on how to read a write data from a DA server.
	</para>
	
</sect3>

<sect3><title>Some short explanation</title>
	<para>
	In the above examples one might notice that in some cases the label in the navigator
	(browser) is different than the item id itself. This is ok and correct since the
	browser can use a different naming and only references the items by id. It can be compared
	to a file system where the filename is just a name pointing to an inode which identifies
	the actual file contents. In order to reduce confusion one should try to have some similarity
	between the browser and the item id.  
	</para>
</sect3>

</sect2>

<sect2><title>Setting up an OSGi based master server</title>
	<para>
	After playing around with the client it might be a good idea to try out the
	<quote>master server</quote>. The master server is normally used to aggregate
	values from different device drivers and provide them to clients. While aggregating
	the values they are also processed and archived. Alarms might get generated, formulas
	and script executed, values changed and security added. The master server is an
	<trademark>OSGi</trademark> based application that provides bundles to achieve that.
	</para>
	
<sect3><title>Pre-conditions</title>
	<para>
	You need Eclipse 3.5.2 (at the moment of writing).
	</para>
	<para>
	You need a checked out version of OpenSCADA or a correctly set up target platform
	containing all OpenSCADA repositories (see also XXX).
	</para>
</sect3>

<sect3><title>Run configuration</title>
	<para>
	Create a new <trademark>OSGi</trademark> run configuration for Equinox. Activate the
	following bundles:
	<itemizedlist>
		<listitem><para><filename>org.openscada.da.server.osgi</filename></para></listitem>
		<listitem><para><filename>org.openscada.da.server.osgi.exporter.net</filename></para></listitem>
		<listitem><para><filename>org.openscada.da.datasource.item</filename></para></listitem>
		<listitem><para><filename>org.openscada.da.client.net</filename></para></listitem>
		<listitem><para><filename>org.openscada.da.connection.provider</filename></para></listitem>
		<listitem><para><filename>org.openscada.da.client.connection.service</filename></para></listitem>
		<listitem><para><filename>org.openscada.ca.file</filename></para></listitem>
		<listitem><para><filename>org.openscada.ca.servlet</filename></para></listitem>
		<listitem><para><filename>org.openscada.sec.provider.dummy</filename></para></listitem>
		<listitem><para><filename>*jetty*</filename></para></listitem>
		<listitem><para><filename>org.eclipse.equinox.*http</filename></para></listitem>
	</itemizedlist> 
	And add required bundled automatically in order to add required dependencies.
	</para>
	<para>
	Add the following command line arguments for the <trademark>Java</trademark>
	virtual machine:
	<code><![CDATA[
-Dorg.eclipse.equinox.http.jetty.http.port=8082
-Dopenscada.da.net.exportUri=da:net://0.0.0.0:1204
-Dorg.openscada.ca.file.root=/home/user/cas/test
	]]></code>
	</para>
	<para>
	Now start the configuration and wait for the <trademark>OSGi</trademark> prompt.
	</para>
</sect3>

<sect3><title>Configure the master server</title>
	<para>
	Now head your web server to <uri>http://localhost:8080/ca</uri> and create the following
	configuration objects:
	</para>
	<itemizedlist>
	
	<listitem><para>
	da.connection with id <filename>connection.1</filename>
		<itemizedlist>
			<listitem><para>connection.uri=1203</para></listitem>
		</itemizedlist>
	</para></listitem>
	
	<listitem><para>
	da.datasource.dataitem with id <filename>datasource.1</filename>
		<itemizedlist>
			<listitem><para>connection.id=connection.1</para></listitem>
			<listitem><para>item.id=memory-cell-0</para></listitem>
		</itemizedlist>
	</para></listitem>
	
	<listitem><para>
	da.dataitem.datasource with any id
		<itemizedlist>
			<listitem><para>datasource.id=datasource.1</para></listitem>
			<listitem><para>item.id=alias.item.1</para></listitem>
		</itemizedlist>
	</para></listitem>
	
	</itemizedlist>
</sect3>

<sect3><title>Connecting</title>
	<para>
	Start the OSTC and connect to <uri>da:net://localhost:1204</uri>. You should find an item
	named <filename>alias.item.1</filename> which (when draged to the real time list) is
	<quote>CONNECTED</quote> but <quote>NULL</quote>.
	</para>
	<para>
	Start the local test servers from inside OSTC and write (e.g.) 5 to the memory cell control
	item as described in <xref linkend="quickStart_ostc"/>. Now write some value on the
	item <filename>memory-cell-0</filename>.
	</para>
	<para>
	After the write operation is complete you should see that also the item
	<filename>alias.item.1</filename> has changed to the value you just wrote.
	</para>
</sect3>

<sect3><title>Summary</title>
	<para>
	This was just a quick and easy setup of an <trademark>OSGi</trademark> based server
	application. Of course there is lots more. See the sections <xref linkend="cafactories"/>
	for factories that are available and provide more functionality and <xref linkend="osgibundles"/>
	which <trademark>OSGi</trademark> bundles provide the functionality.
	</para>
</sect3>

</sect2>
 		
</sect1>
  	
</chapter>