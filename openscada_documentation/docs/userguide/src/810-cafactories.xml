<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://docbook.org/xml/4.4/docbookx.dtd" []>

<chapter id="cafactories"><title>Configurable services</title>
	<para>
	This section describes the different configurable services of the 
	<trademark>OpenSCADA</trademark> <trademark>OSGi</trademark> based system.
	</para>
	
<sect1
	id="cafactory_org.openscada.sec.provider.script.factory"
	><title>org.openscada.sec.provider.script.factory</title>
<para>
	This configuration factories creates entries that configure the script based
	authentication service. Each entry is used in evaluating the authorization
	request in the case the script based authorization provider is used. The entries
	will not cause further <trademark>OSGi</trademark> services to be created but only
	create internal objects for the service itself.
</para>

	<sect2><title>Configuration</title>
		<para>
		The following configuration properties are available:
		</para>
		
		<table><title>Configuration properties of <filename>org.openscada.sec.provider.script.factory</filename></title>
				<tgroup cols="4">
				<thead>
					<row>
						<entry>Property</entry>
						<entry>Type</entry>
						<entry>Required</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>engine</entry>
						<entry>String</entry>
						<entry>optional</entry>
						<entry>
						The name of the string engine to use. This must be a valid 
						and registered JSR-223 script engine. If it is not specified
						the JavaScript engine will be used.
						</entry>
					</row>
					
					<row>
						<entry>priority</entry>
						<entry>Integer</entry>
						<entry>optional</entry>
						<entry>
						The priority of this entry. Gives a sort order in which the
						entries will be evaluated. Lower number will be evaluates before
						higher numbers.
						</entry>
					</row>
					
					<row>
						<entry>for.id</entry>
						<entry>String</entry>
						<entry>optional</entry>
						<entry>
						A regular expression that will filter out object id for this entry.
						If the regular expression matches the entry it will be evaluated.
						Otherwise the entry will not be evaluated for this request. If
						the property is not set it will be considered as a match. 
						</entry>
					</row>
					
					<row>
						<entry>for.type</entry>
						<entry>String</entry>
						<entry>optional</entry>
						<entry>
						A regular expression that will filter out object type for this entry.
						If the regular expression matches the entry it will be evaluated.
						Otherwise the entry will not be evaluated for this request. If
						the property is not set it will be considered as a match.
						</entry>
					</row>
					
					<row>
						<entry>for.action</entry>
						<entry>String</entry>
						<entry>optional</entry>
						<entry>
						A regular expression that will filter out action for this entry.
						If the regular expression matches the entry it will be evaluated.
						Otherwise the entry will not be evaluated for this request. If
						the property is not set it will be considered as a match.
						</entry>
					</row>
					
					<row>
						<entry>script</entry>
						<entry>String</entry>
						<entry>required</entry>
						<entry>
						The script that will be executed. See
						<xref linkend="cafactory_org.openscada.sec.provider.script.factory_writing"/> for
						more information about writing authorization scripts.
						</entry>
					</row>
					
					
				</tbody>
				</tgroup>
		</table>
		
	</sect2>
	
	<sect2 id="cafactory_org.openscada.sec.provider.script.factory_writing">
		<title>Writing authorization scripts</title>
		<para>
			The script has to evaluate if the request provided can be granted, is rejected
			or if the script cannot decide about that. The script has to provide a return
			value. How to do that depends on the scripting language you are using. The following
			samples are based on the JavaScript script engine.
		</para>
		<para>
			The script fragment will have the following global variables bound:
			<variablelist>
				<varlistentry>
					<term>id</term>
					<listitem>
						<para>
						The object id for which the authorization is requested.
						This variable can be <code>null</code>.
						</para>
					</listitem>
				</varlistentry>
				
				<varlistentry>
					<term>type</term>
					<listitem>
						<para>
						The object type for which the authorization is requested.
						This variable can be <code>null</code>.
						</para>
					</listitem>
				</varlistentry>
				
				<varlistentry>
					<term>action</term>
					<listitem>
						<para>
						The action for which the authorization is requested.
						This variable can be <code>null</code>.
						</para>
					</listitem>
				</varlistentry>
				
				<varlistentry>
					<term>user</term>
					<listitem>
						<para>
						The information about the user requesting the authorization.
						 This variable can be <code>null</code>.
						</para>
					</listitem>
				</varlistentry>
				
				<varlistentry>
					<term>context</term>
					<listitem>
						<para>
						A map containing additional information in  key/value pairs.
						 This variable is never <code>null</code> but can be empty. 
						</para>
					</listitem>
				</varlistentry>
				
				<varlistentry>
					<term>GRANTED</term>
					<listitem>
						<para>
						A pre-defined object instance which reflects a <quote>granted</quote>
						result. This variable is never <code>null</code>.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</para>
		
		<para>
		The return value of the script fragment defined the result of the authorization check.
		If no return value is given or if the return value is <code>null</code> then the entry
		has not voted and the next entry is checked. The application itself decides what will
		happen if no entry has voted.
		</para>
		
		<para>
		The return value can be either the predefined global variable <varname>GRANTED</varname>.
		It can be a boolean value were <code>true</code> means <emphasis>granted</emphasis> and
		<code>false</code> means <emphasis>rejected</emphasis>. It can be a number where
		<emphasis>zero</emphasis> means <emphasis>granted</emphasis> and any other value means
		<emphasis>rejected</emphasis>. The number itself is used as error code.
		A string where an empty string means <emphasis>granted</emphasis>
		and any other string will mean <emphasis>rejected</emphasis>. The string itself is used as
		error message. It can be an instance of <classname>org.openscada.utils.statuscodes.StatusCode</classname>
		which always means <emphasis>rejected</emphasis>. The status code is used as error code and message.
		It can be a <classname>Throwable</classname> which always means <emphasis>rejected</emphasis>. If it
		is a status coded exception the status code information will be used as well. It can be an instance
		of <classname>org.openscada.sec.provider.script.Result</classname> which is a complex result structure
		that contains all information. If the result type is something else then the previously describes types
		the request is <emphasis>rejected</emphasis>.
		</para>
		
		<para>
			The following, rather simple example, shows a method to grant everything. Combined with
			the <code>for.id</code>, <code>for.type</code> and <code>for.action</code> filters you
			can have a rather simple start.
<example><title><function>SampleClient1</function></title>
				<programlisting language="JavaScript">
GRANTED;
				</programlisting>
</example>
		</para>
		
	</sect2>

</sect1>


<sect1
	id="cafactory_da.connection"
	><title>da.connection</title>
	
<para>
	This factory creates and registers DA connections. The persistent id of the service
	is the id of the configuration. By default connections will be automatically
	re-connected when the connection drops.
</para>
<note><para>
	The factory cannot create the connections itself since it needs a connection provider that
	implements the actual connection type. Once the connection provider becomes available in
	<trademark>OSGi</trademark> the connection is created and registered. 
</para></note>

	<sect2><title>Configuration</title>
		<para>
		The following configuration properties are available:
		</para>
		
		<table><title>Configuration properties of <filename>org.openscada.sec.provider.script.factory</filename></title>
				<tgroup cols="4">
				<thead>
					<row>
						<entry>Property</entry>
						<entry>Type</entry>
						<entry>Required</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>connection.uri</entry>
						<entry>String</entry>
						<entry>required</entry>
						<entry>
						The URI of the DA connection to create 
						</entry>
					</row>
				</tbody>
				</tgroup>
		</table>
		
	</sect2>
	
	<sect2><title>Additional information</title>
		<para>
		For realizing DA NET connections start the bundles
		<filename>org.openscada.da.connection.provider</filename>
		and <filename>org.openscada.da.client.net</filename> 
		</para>
	</sect2>
	
</sect1>


<sect1
	id="cafactory_da.dataitem.datasource"
	><title>da.dataitem.datasource</title>
	
<para>
	This factory creates and registers DA data items with an DA data item object pool. The values
	this data item provides comes from a defined data source.
</para>

	<sect2><title>Configuration</title>
		<para>
		The following configuration properties are available:
		</para>
		
		<table><title>Configuration properties of <filename>org.openscada.sec.provider.script.factory</filename></title>
				<tgroup cols="4">
				<thead>
					<row>
						<entry>Property</entry>
						<entry>Type</entry>
						<entry>Required</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>datasource.id</entry>
						<entry>String</entry>
						<entry>required</entry>
						<entry>
						The id of the source data item which provides the values
						exported by this data item. 
						</entry>
					</row>
					
					<row>
						<entry>item.id</entry>
						<entry>String</entry>
						<entry>required</entry>
						<entry>
						The id of the data item when it is exported. This id must be
						unique.
						</entry>
					</row>
				</tbody>
				</tgroup>
		</table>
		
	</sect2>
	
	<sect2><title>Additional information</title>
		<para>
		The created data item will subscribe to a data source with configured id (datasource.id).
		Once it is attached to the data source it will export this data as an data item.
		</para>
		<para>
		Although the data item is registered using an object pool there are two steps needed
		in order to access it using a client application (e.g. OSTC) using the DA NET protocol.
		First a Hive implementation is needed that catches up the data items from the object pools
		and gathers them in a Hive instance. Next the hive instance must be exported using a
		protocol implementation.
		</para>
		<para>
		A ready to run hive implementation is provided by the bundle
		<filename>org.openscada.da.server.osgi</filename> and a DA NET exporter is available
		in the bundle <filename>org.openscada.da.server.osgi.exporter.net</filename>. Starting these
		two bundles will do the trick. Be aware that the exporter bundle exports the service on TCP port
		1202 by default. You might need to change that.
		</para>
	</sect2>
	
</sect1>


<sect1
	id="cafactory_da.datasource.dataitem"
	><title>da.datasource.dataitem</title>
	
<para>
	This factory creates and registers a data source that gets its input from a client
	side data item.
</para>

	<sect2><title>Configuration</title>
		<para>
		The following configuration properties are available:
		</para>
		
		<table><title>Configuration properties of <filename>org.openscada.sec.provider.script.factory</filename></title>
				<tgroup cols="4">
				<thead>
					<row>
						<entry>Property</entry>
						<entry>Type</entry>
						<entry>Required</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>connection.id</entry>
						<entry>String</entry>
						<entry>required</entry>
						<entry>
						The service id of a DA connection which has the connection
						to the hive of the data item
						</entry>
					</row>
					<row>
						<entry>item.id</entry>
						<entry>String</entry>
						<entry>required</entry>
						<entry>
						The item id of the data item to subscribe to in the remote hive
						</entry>
					</row>
				</tbody>
				</tgroup>
		</table>
		
	</sect2>
	
	<sect2><title>Additional information</title>
		<para>
		The datasource creates a new data item subscription on the specified hive connection.
		Once the connection is available and established it will automatically subscribe and
		provide the values to data sources subscribe to itself. 
		</para>
	</sect2>
	
</sect1>


<sect1
	id="cafactory_org.openscada.da.server.osgi.summary.attribute"
	><title>org.openscada.da.server.osgi.summary.attribute</title>
	
<para>
	This factory created and registers data sources which summarize all other data
	sources by attribute name.
</para>

	<sect2><title>Configuration</title>
		<para>
		The following configuration properties are available:
		</para>
		
		<table><title>Configuration properties of <filename>org.openscada.da.server.osgi.summary.attribute</filename></title>
				<tgroup cols="4">
				<thead>
					<row>
						<entry>Property</entry>
						<entry>Type</entry>
						<entry>Required</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>attribute</entry>
						<entry>String</entry>
						<entry>required</entry>
						<entry>
						The name of the attribute by which the summarization should be performed.
						</entry>
					</row>
				</tbody>
				</tgroup>
		</table>
		
	</sect2>
	
	<sect2><title>Additional information</title>
		<para>
		The datasource creates a new data item subscription on the specified hive connection.
		Once the connection is available and established it will automatically subscribe and
		provide the values to data sources subscribe to itself. 
		</para>
	</sect2>
	
</sect1>

</chapter>