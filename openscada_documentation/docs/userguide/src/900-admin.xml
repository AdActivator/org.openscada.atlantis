<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://docbook.org/xml/4.4/docbookx.dtd" []>

<chapter id="admin"><title>Administration</title>
	<para>
	This section describes some administrative tasks of the <trademark>OpenSCADA</trademark> system.
	</para>
	
<!--
  - CA Administration 
  -->
	
<sect1><title>Administration of <acronym>CA</acronym> based servers</title>
	<para>
	The <acronym>CA</acronym> provides a method of configuration for <trademark>OpenSCADA</trademark>
	servers and is commonly used with <trademark>OSGi</trademark> based applications. <trademark>OSGi</trademark>
	based applications make use of an extremely modularized service infrastructure and the
	<acronym>CA</acronym> is the system to configure and manage these service instances.  
	</para>
	<para>
	The <acronym>CA</acronym> can be seen as a database which lives inside each main application container
	(<abbrev>e.g.</abbrev> <trademark>OSGi</trademark> container) and to which all providers (factories)
	of services subscribe to. The service factories will receive initial configuration information and
	following configuration updates from the <abbrev>CA</abbrev> and adapt their provides services to these
	configuration information. Of course the <abbrev>CA</abbrev> needs to persistently store the
	configuration data. Depending on the implementation of the <abbrev>CA</abbrev> the data might be stored in
	a local file system or a database accessed using <acronym>JDBC</acronym>.  
	</para>
	<para>
	At the moment there are two implementation of the <acronym>CA</acronym> in <trademark>OpenSCADA</trademark>
	Atlantis. One is file based (<trademark>OSGi</trademark> bundle <filename>org.openscada.ca.file</filename>) and one is
	<acronym>JDBC</acronym> based (<trademark>OSGi</trademark> bundle <filename>org.openscada.ca.jdbc</filename>).
	<note><para>Only one implementation should be active at one time in one application. Otherwise multiple <acronym>CA</acronym>
	running instances will cause unspecified behavior.</para></note>
	</para>
	<para>
	Independent of which implementation is active, the <acronym>CA</acronym> provides common interfacing methods to
	other services. Two services of interest are the servlet configurator and the <acronym>JAX-WS</acronym> WebService interface.
	Both can be used to configure the <acronym>CA</acronym> from outside the application and will be explained in the following
	sections.
	</para>
	
	<para>
	For a list of services to configure using the <acronym>CA</acronym> see <xref linkend="cafactories"/>.
	</para>
	
<sect2><title>Servlet configurator</title>
	<para>
	The servlet configurator provides an easy web access for human end users using an <acronym>HTML</acronym> based interface. The
	user can access the web page using a standard web browser and create, view, update or delete configuration entries.  
	</para>
	<note><para>The servlet configurator currently shows the whole configuration at once using one web page. If you have a rather
	huge configuration this might bring your web browser into trouble rendering such a big web page.</para></note>
	
	<sect3><title>Activating the servlet configurator</title>
	<para>
	In order to activate the servlet configurator you will need to install and start the following bundles assuming that
	<trademark>Equinox</trademark> is used as <trademark>OSGi</trademark> container:
	<itemizedlist>
		<listitem><para><filename>org.mortbay.jetty.server</filename></para></listitem>
		<listitem><para><filename>org.eclipse.equinox.http.jetty</filename></para></listitem>
		<listitem><para><filename>org.openscada.ca.servlet</filename></para></listitem>
	</itemizedlist>
	</para>
	<para>
	In order to choose a different port for the <acronym>HTTP</acronym> server than port 80 the system property
	<varname>org.eclipse.equinox.http.jetty.http.port</varname> has to be set to the specific port number that
	should be used instead (<abbrev>e.g.</abbrev> 8080).
	</para> 
	<para>
	If a different container than <trademark>Equinox</trademark> is used the container specific HTTP registry has to
	be started and then the bundle <filename>org.openscada.ca.servlet</filename>.
	</para>
	</sect3>
	
	<sect3><title>Accessing the servlet configurator</title>
	<para>
	Navigate to <uri>http://hostname:port/ca</uri> (<abbrev>e.g.</abbrev> <uri>http://localhost:8080/ca</uri>) and
	a list of all factories and configuration entries will be provided.
	</para>
	</sect3>
	
</sect2>

<sect2><title>Web service interface</title>
	<para>
	The web service interface provides a more machine based access to the <acronym>CA</acronym> system. A web service based
	on <acronym>JAX-WS</acronym> is provided which uses <acronym>HTTP</acronym> as transport layer but does not provide a
	human end user interface. Normally an application will access this interface providing its own, custom interface.
	</para>
	<para>
	The <trademark>OpenSCADA</trademark> Administration client provides such an interface and allows the user to view, import
	and export configuration archives. The basic workflow for mass configuration is that a all configuration fragments
	(like spreadsheet based IO lists and other sources) are compiled to an
	<quote> <trademark>OpenSCADA</trademark> Configuration Archive</quote> (<acronym>OSCAR</acronym>). This file contains all
	informations needed and can be imported to the server using the administration client. During the import process the
	client will read the <acronym>OSCAR</acronym> file and the current configuration from the server. The difference between
	these two is calculated and the required actions are then sent to the server for processing.
	</para>
	<para>
	Also can the current configuration of a <acronym>CA</acronym> be exported from a running server into an <acronym>OSCAR</acronym>
	file for backup, transfer to another server, <abbrev>etc.</abbrev>.
	</para>

	<sect3><title>Activating the web service interface</title>
	<para>
	In order to activate the s web service interface you will need to install and start the following bundles:
	<itemizedlist>
		<listitem><para><filename>org.openscada.utils.osgi.jaxws</filename></para></listitem>
		<listitem><para><filename>org.openscada.ca.servlet.jaxws</filename></para></listitem>
	</itemizedlist>
	</para>
	<para>
	The communication endpoint to which the service will be bound can be specificed using the system property
	<varname>org.openscada.utils.osgi.jaxws.baseAddress</varname>. The value must be a parsable <acronym>HTTP</acronym>
	<acronym>URI</acronym> which can also be the <quote>any interface</quote> (0.0.0.0). The value
	<uri>http://0.0.0.0:9091</uri> will bind the web service to all network interfaces and <acronym>TCP</acronym>
	port 9091.
	</para>
	</sect3>
	
	<sect3><title>Creating a new connection entry</title>
		<para>
		In order to get access from the <trademark>OpenSCADA</trademark> Administration Client to the <acronym>CA</acronym>
		you will need to add a new connection to the list of available connections. This is just another connection like all
		other connections in the administration client.
		</para>
		<para>
		The <acronym>URI</acronym> of the a <acronym>CA</acronym> connection is <uri>ca:jaxws://hostname:port</uri>
		(<abbrev>e.g.</abbrev>: <uri>ca:jaxws://localhost:9091</uri>).
		</para>
	</sect3>
	
	<sect3><title>Importing a configuration archive</title>
		<para>
		In the <quote>Connections</quote> view of the <trademark>OpenSCADA</trademark> Administration Client establish
		a connection to the target <acronym>CA</acronym> connection:
		
		<!-- image: connect -->
		<mediaobject>
			<imageobject><imagedata fileref="images/900-admin/connect.png" format="PNG" scalefit="1"/></imageobject>
 			<caption>Connect to CA</caption>
		</mediaobject>
		</para>
		
		<para>
		Once the connection is established use the menu entry <menuchoice><guimenuitem>Import configuration</guimenuitem></menuchoice>
		from the context menu:
		
		<!-- image: import context menu -->
		<mediaobject>
			<imageobject><imagedata fileref="images/900-admin/import.png" format="PNG" scalefit="1"/></imageobject>
 			<caption>Start import wizard</caption>
		</mediaobject>	
		</para>
		
		<para>
		The import wizard will be opened and required the user to select the configuration archive that should be imported. Select
		the file using the <guibutton>Browse...</guibutton>. When the file is selected it will be loaded automatically. The file
		location is stored in the preferences and loaded as default value the next time the wizard is opened. In this case the user
		can use the <guibutton>Load</guibutton> button to simply load the default file. When the file is loaded advance the next
		wizard page.
		
		<!-- image: import wizard dialog - file -->
		<mediaobject>
			<imageobject><imagedata fileref="images/900-admin/wizard-local.png" format="PNG" scalefit="1"/></imageobject>
 			<caption>Select local data</caption>
		</mediaobject>
		</para>
		
		<para>
		The remote data used for the delta generation must be loaded. Normally this data is loaded from the <acronym>CA</acronym>
		of the server but for testing purposes it might be useful to make a delta using another local file. If you want to import
		data to the remote server use the button <guibutton>Load from server</guibutton>. After the data was loaded from the server
		advance to the next wizard page.
		
		<!-- image: import wizard dialog - remote -->
		<mediaobject>
			<imageobject><imagedata fileref="images/900-admin/wizard-remote.png" format="PNG" scalefit="1"/></imageobject>
 			<caption>Select remote data</caption>
		</mediaobject>
		</para>
		
		<para>
		In this page the user has the option to select configuration elements that should be ignored when importing the new data.
		Factories that are selected will simply be ignore from the import process and neither created, updated nor deleted. Select
		factories that should be ignored by the import process and advance to the next wizard page.
		
		<!-- image: import wizard dialog - ignore -->
		<mediaobject>
			<imageobject><imagedata fileref="images/900-admin/wizard-ignore.png" format="PNG" scalefit="1"/></imageobject>
 			<caption>Select elements to ignore</caption>
		</mediaobject> 
		</para>
		
		<para>
		This last page of the wizard will show the delta and the operations that will be performed when the wizard is finished. This
		is the last chance to cancel the import process since nothing has been commited up to now. Pressing the <guibutton>Finish</guibutton>
		will start import process.
		
		<!-- image: import wizard dialog - finish -->
		<mediaobject>
			<imageobject><imagedata fileref="images/900-admin/wizard-delta.png" format="PNG" scalefit="1"/></imageobject>
 			<caption>Review changes</caption>
		</mediaobject>
		</para>
		
	</sect3>

</sect2>
	
</sect1>

<!--
  - OSGi based servers 
  -->
	
<sect1><title><trademark>OSGi</trademark> based servers</title>
	<para>
	This section focuses on the administration of <trademark>OSGi</trademark> based server installations.
	</para>
	
<sect2><title>Requirements &amp; preconditions</title>
<para>
	The following requirements must be satisfied:
	<itemizedlist>
		<listitem><para>Installed operating system</para></listitem>
		<listitem>
			<para>Installed Java Version 5+</para>
			<itemizedlist>
				<listitem><para>SUN or IBM JVM are recommended</para></listitem>
				<listitem><para>A <acronym>JRE</acronym> is sufficient</para></listitem>
				<listitem><para>The <envar>JAVA_HOME</envar> environment variable has the be set</para></listitem>
			</itemizedlist>
		</listitem>
		
	</itemizedlist>
</para>
</sect2>

<sect2><title>Installation of administrative Tools</title>
	<note><para>
	The installation of the administrative tools is currently only supported on RPM based systems
	like <trademark>RedHat Enterprise Linux</trademark>. Of course we want to expand this to other
	operating systems and distributions, but at the moment our focus is in <acronym>RHEL</acronym>.
	</para>
	<para>
	It still is possible to install <trademark>OpenSCADA</trademark> on other system. It only is
	more work to do. 
	</para></note>
	
	<para>
	First copy the RPMs to the target system and install them using:
	</para>
	
	<para>
	<screen>
	<prompt>#</prompt> rpm -Uvh *.rpm
	</screen>
	</para>
</sect2>

<sect2><title>Create a P2 base installation</title>
	<para>
	It is now required to create a base server installation. This will install the
	<trademark>OSGi</trademark> container but will not install much functionality
	inside the container.
	</para>
	<para>
	The location of the installation might be of interest to you or your system
	administrator. So it should be chosen carefully as is not recommended to be
	moved.
	</para>
	<para>
	Create the P2 base installation by issuing the following command:
	</para>
	
	<screen>
	<prompt>$</prompt> p2.create "targetDirectory"
	</screen>
	
	<para>
	This will create a new directory named <filename>targetDirectory</filename>
	and install the basic <trademark>OSGi</trademark> container. The command will
	fail if the directory already exists or the base path does not exist.
	</para>
	
	<para>
	Next the custom artifacts that should be included in the setup need to be installed.
	</para>
</sect2>

<sect2><title>Deploying the <trademark>OpenSCADA</trademark> artifacts</title>
	<para>
	The next step is to deploy the <trademark>OpenSCADA</trademark> bundles and features
	to the previously created P2 installation. Depending on the functionality you want to
	have in your server the selection of bundles or features might differ. If you just
	want <quote>it all in</quote> you can install the <acronym>IU</acronym>
	<filename>org.openscada.deploy.feature.group</filename>
	</para>
	
	<screen>
	<prompt>$</prompt> p2.install test "org.openscada.deploy.feature.group"
	</screen>
	
	<para>
	It might also be that you need some project specific features that you need to install
	now.
	</para>
</sect2>

<sect2><title>Setting runtime parameters</title>
	<para>
	In order to set up some <trademark>Java</trademark> system properties you can edit the
	file <filename>laucher.properties</filename> which contains a <code>key=value</code> scheme
	of system properties that will be set on startup of the container.
	</para>
</sect2>

<sect2><title>Starting the <trademark>Equinox</trademark> container</title>
	<para>
	In order to start the container change the current directory to the installation
	directory issue the following command: 
	</para>
	
	<screen>
	<prompt>$</prompt> ./launcher 
	</screen>
	
	<para>
	The <trademark>OSGi</trademark> container will start up and show the <trademark>Equinox</trademark>
	console. If you want to shut the application down you will need to issue the command <quote>close</quote>:
	</para>
	
	<screen>
	<prompt>osgi&gt;</prompt> close  
	</screen>
</sect2>

<sect2><title>Customizing services</title>
	<para>
	After installing the feature <filename>org.openscada.deploy.feature.group</filename> you will
	have all services and features installed. Bundles that you do not want to be in the container
	can be uninstalled by issuing the following command:
	</para>
	
	<screen>
	<prompt>osgi&gt;</prompt> uninstall bundle.id
	</screen>
	
	<para>
	Although the rest of the bundles will be installed they are not started or active in any way.
	So they have to be started in order to provide the services you need. Of course at this point
	the <trademark>OSGi</trademark> dependency management kicks in an automatically activates
	bundles as you defined. This means that bundles might get started automatically if others depend on
	it or they might simply get <quote>resolved</quote> which means that they are in use but
	not activated (provide services). For more information about the <trademark>OSGi</trademark>
	lifecycle management see the <trademark>OSGi</trademark> documentation itself.  
	</para>
	
	<para>
	<trademark>Equinox</trademark> will remember which services were started and will restart
	them the next time the container is started.
	</para>
</sect2>

<sect2><title>A quick introduction into the <trademark>Equinox</trademark> <trademark>OSGi</trademark>
console</title>

	<para>
	List all installed bundles:
	</para>
	<screen>
	<prompt>osgi&gt;</prompt> ss
	</screen>
	
	<para>
	List all installed bundles that match or partially match the string <filename>openscada</filename>:
	</para>
	<screen>
	<prompt>osgi&gt;</prompt> ss openscada
	</screen>
	
	<para>
	Start a bundle named <filename>org.openscada.ca.file</filename>
	</para>
	<screen>
	<prompt>osgi&gt;</prompt> start org.openscada.ca.file
	</screen>
	
	<para>
	Stop a bundle named <filename>org.openscada.ca.file</filename>
	</para>
	<screen>
	<prompt>osgi&gt;</prompt> stop org.openscada.ca.file
	</screen>
</sect2>

</sect1>
	
</chapter>