<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://docbook.org/xml/4.4/docbookx.dtd" >
<article lang="en">
	<articleinfo>
		<title>GMPP protocol specification</title>
		<author>
			<firstname>Jens</firstname>
			<surname>Reimann</surname>
			<email>jens.reimann@inavare.net</email>
		</author>
		<copyright>
		<year>2006</year>
		<year>2007</year>
		<year>2008</year>
		<year>2009</year>
		<holder>TH4 SYSTEMS GmbH</holder></copyright>
		<legalnotice>
			<para>
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.2
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, with the Front-Cover Texts being
    <quote>GMPP protocol specification</quote>, and no Back-Cover Texts.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".
           </para>
		</legalnotice>
	</articleinfo>
  
  <sect1><title>Overview and Purpose</title>
  	<para>
  		This document describes the <abbrev>GMPP</abbrev> (Generic Message Passing Protocol).
  	</para>
  	<para>
  		This document currently is a <emphasis>work in progress</emphasis> so expect
  		this specification to change.
  	</para>
  	
    <sect2><title>Uses for GMPP</title>
      <para>
        As the name already says GMPP is a protocol designed to pass messages between
        communicating peers. Therefore GMPP is somewhat connection based (although there
        is no need for to use a connection based transport layer it may ease the implementation).
      </para>
      <para>
        GMPP was specified during the development of the <quote>OpenSCADA</quote> project.
        The idea was to have a message based protocol, which can be used for client/server
        connections. It should be flexible in adding new packets and adding new
        data structures as message payload. Also it should be portabl between platforms and
        programming languages. And of course: easy to implement!
      </para>
    </sect2>
    
  	<sect2><title>Initial Defintions</title>
  		<itemizedlist>
  			<listitem>
  				<para>
  					All values must be transmitted in <emphasis>network byte order</emphasis>.
  				</para>
  			</listitem>
  			
  			<listitem>
  				<para>
  					All <quote>string data</quote> must be transmitted in <emphasis>UTF-8</emphasis> encoded.
  				</para>
  			</listitem>
  			
  		</itemizedlist>
  	</sect2>
  	
  </sect1>

  <sect1><title>Data Encoding</title>
  	<para>
		Data is transmitted in messages. Each message consists of a 
		common header and a list of values.
  	</para>
  	
  	<sect2><title>Common Header</title>
  	<para>
		The common header is defined as follows:
		<table>
			<title>Common header</title>
            <tgroup cols="4" colsep="1" rowsep="1">
            <colspec colname="offset"/>
            <colspec colname="field"/>
            <colspec colname="type"/>
            <colspec colname="description"/>
			<thead>
				<row>
					<entry>Offset (in bytes)</entry>
					<entry>Field</entry>
					<entry>Type</entry>
					<entry>Description</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>0</entry>
					<entry>Command Code</entry>
					<entry>32 bit signed integer</entry>
					<entry>
						A command code which specifies the type of the message.
						(Also refer to <xref linkend="command_codes"/>)
					</entry>
				</row>
				<row>
					<entry>4</entry>
					<entry>Timestamp</entry>
					<entry>64 bit signed integer</entry>
					<entry>The timestamp when this message was sent</entry>
				</row>
				<row>
					<entry>12</entry>
					<entry>Sequence</entry>
					<entry>64 bit signed integer</entry>
					<entry>The sequence number of this package</entry>
				</row>
				<row>
					<entry>20</entry>
					<entry>Reply Sequence</entry>
					<entry>64 bit signed integer</entry>
					<entry>
						The sequence number of the message to which this message is a reply.
						If this message is not a reply zero must be used instead.
					</entry>
				</row>
				<row>
					<entry>28</entry>
					<entry>Number of bytes following</entry>
					<entry>32 bit signed integer</entry>
					<entry>
						The number of bytes following after the common header. This
						is the size of the payload data.
					</entry>
				</row>
			</tbody>
            </tgroup>
		</table>
  	</para>
  	</sect2>
    
  	<sect2><title>Message Payload</title>
  	<para>
  		Followed by the <quote>common header</quote> comes message payload. The
  		message payload is exactly one encoded value. The special case is that
  		if <emphasis>must</emphasis> be of the type <quote>map</quote>. The map
  		type may have sub values which can be of any other type.
  	</para>
  	<para>
  		Since some types may contains sub values the message payload actually
  		is somewhat like a tree structure of data.
  	</para>
  	<para>
		There is a common structure for all data types:
		<table>
			<title>Common structure of data types</title>
            <tgroup cols="4" colsep="1" rowsep="1">
            <colspec colname="offset"/>
            <colspec colname="field"/>
            <colspec colname="type"/>
            <colspec colname="description"/>
			<thead>
				<row>
					<entry>Offset</entry>
					<entry>Field</entry>
					<entry>Type</entry>
					<entry>Description</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>0</entry>
					<entry>Data Type Code</entry>
					<entry>32 bit signed integer</entry>
					<entry>The type code of the data type</entry>
				</row>
				<row>
					<entry>4</entry>
					<entry>Data Type Data Length (in bytes)</entry>
					<entry>32 bit signed integer</entry>
					<entry>The length of the data following for this value (in bytes)</entry>
				</row>
			</tbody>
            </tgroup>
		</table>
  	</para>
    
  	<sect3><title>Void</title>
  		<para>
  			The void data type actually transports nothing. It can be used
  			if you intentionally want to transfer no data.
  		</para>
  		<para>
  			Assume a case where you want to transmit flags. So you have either
  			the case <quote>flag is set</quote> or <quote>flag is not set</quote>.
  			You can achieve this by using a map and adding void values to that map.
  			On the receiver side you can then check if the map contains a key with the
  			name you are looking for which indicates for you that the flag is set.
  		</para>
  		<para>
  			<table>
  				<title>Structure of the void data type</title>
                <tgroup cols="5" colsep="1" rowsep="1">
                <colspec colname="offset"/>
                <colspec colname="field"/>
                <colspec colname="type"/>
                <colspec colname="value"/>
                <colspec colname="description"/>
  				<thead>
					<row>
						<entry>Offset</entry>
						<entry>Field</entry>
						<entry>Type</entry>
						<entry>Value</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>0</entry>
						<entry>Data Type Code</entry>
						<entry>32 bit signed integer</entry>
						<entry>0x00000004</entry>
						<entry>The type code of the data type</entry>
					</row>
					<row>
						<entry>4</entry>
						<entry>Data Type Data Length (in bytes)</entry>
						<entry>32 bit signed integer</entry>
						<entry>0</entry>
						<entry>The length of the data following for this value (in bytes)</entry>
					</row>
				</tbody>
                </tgroup>
  			</table>
  		</para>
  	</sect3>
  	
  	<sect3><title>List</title>
  		<para>
  			The list type contains a list of sub-values. Lists do maintain the order
  			of insertion.
  		</para>
  		<para>
  			<table>
  				<title>Structure of the list data type</title>
                <tgroup cols="5" colsep="1" rowsep="1">
                <colspec colname="offset"/>
                <colspec colname="field"/>
                <colspec colname="type"/>
                <colspec colname="value"/>
                <colspec colname="description"/>
  				<thead>
					<row>
						<entry>Offset</entry>
						<entry>Field</entry>
						<entry>Type</entry>
						<entry>Value</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>0</entry>
						<entry>Data Type Code</entry>
						<entry>32 bit signed integer</entry>
						<entry>0x00000006</entry>
						<entry>The type code of the data type</entry>
					</row>
					<row>
						<entry>4</entry>
						<entry>Data Type Data Length (in bytes)</entry>
						<entry>32 bit signed integer</entry>
						<entry>4 + size of sub values</entry>
						<entry>
							The length of the data following for this value (in bytes)
							including the size of all sub values.
						</entry>
					</row>
					<row>
						<entry>8</entry>
						<entry>Number of sub elements</entry>
						<entry>32 bit signed integer</entry>
						<entry>?</entry>
						<entry>
							The number of sub elements that are stored in the list.
							If these values also have sub values they are not counted
							here.
						</entry>
					</row>
					<row>
						<entry>12 ...</entry>
						<entry>Sub values</entry>
						<entry>sub value</entry>
						<entry>size of sub value</entry>
						<entry>
							All contained sub values encoded by the default encoding scheme.
						</entry>
					</row>
				</tbody>
                </tgroup>
  			</table>
  		</para>
  	</sect3>
  	
  	<sect3><title>Map</title>
  		<para>
  			The map data type is like the list type. Only that is stores key/value pairs.
  			The order of insertion must not be maintained. Keys are strings and values may
  			be any data type. Duplicate keys are not allowed.
  		</para>
  		<para>
  			<table>
  				<title>Structure of the map data type</title>
                <tgroup cols="5" colsep="1" rowsep="1">
                <colspec colname="offset"/>
                <colspec colname="field"/>
                <colspec colname="type"/>
                <colspec colname="value"/>
                <colspec colname="description"/>
  				<thead>
					<row>
						<entry>Offset</entry>
						<entry>Field</entry>
						<entry>Type</entry>
						<entry>Value</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>0</entry>
						<entry>Data Type Code</entry>
						<entry>32 bit signed integer</entry>
						<entry>0x00000007</entry>
						<entry>The type code of the data type</entry>
					</row>
					<row>
						<entry>4</entry>
						<entry>Data Type Data Length (in bytes)</entry>
						<entry>32 bit signed integer</entry>
						<entry>4 + size of sub values</entry>
						<entry>
							The length of the data following for this value (in bytes)
							including the size of all sub values.
						</entry>
					</row>
					<row>
						<entry>8</entry>
						<entry>Number of sub elements</entry>
						<entry>32 bit signed integer</entry>
						<entry>?</entry>
						<entry>
							The number of sub elements that are stored in the list.
							If these values also have sub values they are not counted
							here.
						</entry>
					</row>
					<row>
						<entry>12 ...</entry>
						<entry>Sub values</entry>
						<entry>sub value</entry>
						<entry>size of sub value</entry>
						<entry>
							All contained sub values encoded by the default encoding scheme.
						</entry>
					</row>
					<row>
						<entry>12 + size of sub value ...</entry>
						<entry>Key to previous sub value</entry>
						<entry>string</entry>
						<entry>
							The key (name) of the previous sub value.
						</entry>
					</row>
				</tbody>
                </tgroup>
  			</table>
  		</para>
  	</sect3>
  	
  	<sect3><title>String</title>
  		<para>
  			A value containing a text string.
  		</para>
  		<para>
  			<table>
  				<title>Structure of the string data type</title>
                <tgroup cols="5" colsep="1" rowsep="1">
                <colspec colname="offset"/>
                <colspec colname="field"/>
                <colspec colname="type"/>
                <colspec colname="value"/>
                <colspec colname="description"/>
  				<thead>
					<row>
						<entry>Offset</entry>
						<entry>Field</entry>
						<entry>Type</entry>
						<entry>Value</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>0</entry>
						<entry>Data Type Code</entry>
						<entry>32 bit signed integer</entry>
						<entry>0x00000001</entry>
						<entry>The type code of the data type</entry>
					</row>
					<row>
						<entry>4</entry>
						<entry>Data Type Data Length (in bytes)</entry>
						<entry>32 bit signed integer</entry>
						<entry>4 + size of string data</entry>
						<entry>The length of the data following for this value (in bytes)</entry>
					</row>
					<row>
						<entry>8</entry>
						<entry>String data</entry>
						<entry>String data in UTF-8</entry>
						<entry>?</entry>
						<entry>The raw UTF-8 string data. This data is not null terminated.</entry>
					</row>
				</tbody>
                </tgroup>
  			</table>
  		</para>
  	</sect3>
  	
  	<sect3><title>Integer</title>
  		<para>
  			A common 32 bit signed integer value.
  		</para>
  		<para>
  			<table>
  				<title>Structure of the integer data type</title>
                <tgroup cols="5" colsep="1" rowsep="1">
                <colspec colname="offset"/>
                <colspec colname="field"/>
                <colspec colname="type"/>
                <colspec colname="value"/>
                <colspec colname="description"/>
  				<thead>
					<row>
						<entry>Offset</entry>
						<entry>Field</entry>
						<entry>Type</entry>
						<entry>Value</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>0</entry>
						<entry>Data Type Code</entry>
						<entry>32 bit signed integer</entry>
						<entry>0x00000005</entry>
						<entry>The type code of the data type</entry>
					</row>
					<row>
						<entry>4</entry>
						<entry>Data Type Data Length (in bytes)</entry>
						<entry>32 bit signed integer</entry>
						<entry>4</entry>
						<entry>The length of the data following for this value (in bytes)</entry>
					</row>
					<row>
						<entry>8</entry>
						<entry>Payload data</entry>
						<entry>32 bit signed integer</entry>
						<entry>?</entry>
						<entry>The value itself</entry>
					</row>
				</tbody>
                </tgroup>
  			</table>
  		</para>
  	</sect3>
  	
  	<sect3><title>Long</title>
  		<para>
  			A common 64 bit signed integer value.
  		</para>
  		<para>
  			<table>
            <title>Structure of the long data type</title>
                <tgroup cols="5" colsep="1" rowsep="1">
                <colspec colname="offset"/>
                <colspec colname="field"/>
                <colspec colname="type"/>
                <colspec colname="value"/>
                <colspec colname="description"/>
  				<thead>
					<row>
						<entry>Offset</entry>
						<entry>Field</entry>
						<entry>Type</entry>
						<entry>Value</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>0</entry>
						<entry>Data Type Code</entry>
						<entry>32 bit signed integer</entry>
						<entry>0x00000002</entry>
						<entry>The type code of the data type</entry>
					</row>
					<row>
						<entry>4</entry>
						<entry>Data Type Data Length (in bytes)</entry>
						<entry>32 bit signed integer</entry>
						<entry>8</entry>
						<entry>The length of the data following for this value (in bytes)</entry>
					</row>
					<row>
						<entry>8</entry>
						<entry>Payload data</entry>
						<entry>64 bit signed integer</entry>
						<entry>?</entry>
						<entry>The value itself</entry>
					</row>
				</tbody>
                </tgroup>
  			</table>
  		</para>
  	</sect3>
  	
  	<sect3><title>Double</title>
  		<para>
  			A common 64 bit floating point value as defined by IEEE 754.
  		</para>
  		<para>
  			<table>
  				<title>Structure of the double data type</title>
                <tgroup cols="5" colsep="1" rowsep="1">
                <colspec colname="offset"/>
                <colspec colname="field"/>
                <colspec colname="type"/>
                <colspec colname="value"/>
                <colspec colname="description"/>
  				<thead>
					<row>
						<entry>Offset</entry>
						<entry>Field</entry>
						<entry>Type</entry>
						<entry>Value</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>0</entry>
						<entry>Data Type Code</entry>
						<entry>32 bit signed integer</entry>
						<entry>0x00000003</entry>
						<entry>The type code of the data type</entry>
					</row>
					<row>
						<entry>4</entry>
						<entry>Data Type Data Length (in bytes)</entry>
						<entry>32 bit signed integer</entry>
						<entry>8</entry>
						<entry>The length of the data following for this value (in bytes)</entry>
					</row>
					<row>
						<entry>8</entry>
						<entry>Payload data</entry>
						<entry>64 bit floating point</entry>
						<entry>?</entry>
						<entry>The raw 8 bytes IEEE 754 data is encoded.</entry>
					</row>
				</tbody>
                </tgroup>
  			</table>
  		</para>
  	</sect3>
  	</sect2>

  </sect1>
  
  <sect1><title>Protocol properties</title>
  
  	<sect2><title>Sequence Number</title>
  		<para>
  			Each package is tagged with a sequence number. The sequence number must be in
  			the range between 1 (one) and 0x7FFFFFFF (2^31-1).
  			When sending the sequence number must be increased by exactly one for each message.
  			On receiving side the sequence number can be checked and there are several
  			ways on how to deal with sequence number errors (refer to <xref linkend="exceptions"/>).
  		</para>
  		<note>
  			<para>
  				The reason why the sequence number does not start with 0 (zero) is that the reply
  				sequence number may be zero to indicate that the message is not a reply message.
  				In this case the receiving part would not know wether is it a message that replies
  				to message 0 (zero) or a message that does not reply any message.
  			</para>
  		</note>
  		<para>
			Each endpoint to endpoint transmission must maintain its own sequence counter. Connection
			based transmissions must maintain a sequence counter for each connection.
  		</para>
  		<para>
  			Resetting the sequence counter back to 1 (one) is not an error.
  		</para>
  	</sect2>
  	
  	<sect2><title>Reply sequence number</title>
  		<para>
  			The reply sequence number may be used to indicate that a message is a reply to a previous message.
			However sending more than one reply message to the same reply sequence is not allowed.
  		</para>
        <note>
            <para>
              0 (zero) must be used if the message is not a reply message.
            </para>
        </note>
  	</sect2>
  	
  	<sect2 id="command_codes"><title>Well known command codes</title>
  		<para>
  			Messages codes from 0 (zero) to 0xFF (255) are <quote>well
  			known command codes</quote> and are defined in GMPP itself.
  			However this does not prevent you from using these messages
  			yourself.
  		</para>
  		<note>
  			<para>
  				All implementations must be capable of handling these command codes.
  			</para>
  		</note>
  		
  		<sect3><title>CC_UNKNOWN_COMMAND_CODE (0x00000001)</title>
  			<para>
  				Reply message when a command code could not be processed
  				because it was not recognized.
  			</para>
  		</sect3>
  		
  		<sect3><title>CC_FAILED (0x00000002)</title>
  			<para>
  				Reply message when a message could not be processed due to
  				an error.
  			</para>
  			<para>
  				<variablelist><title>Message values</title>
  					<varlistentry>
  						<term>error-info</term>
  						<listitem>
  							<para>An error message. Must be a <quote>String Value</quote></para>
  						</listitem>
  					</varlistentry>
  				</variablelist>
  			</para>
  		</sect3>
  		
  		<sect3><title>CC_ACK (0x00000003)</title>
  			<para>
  				Reply message when a message was successfully processed.
  			</para>
  		</sect3>
  		
  		<sect3><title>CC_PING (0x00000010)</title>
  			<para>
  				Request a CC_PONG from the other peer.
  			</para>
  			<note>
  				<para>
  					Although it is possible to send any data in the
  					field <quote>ping-data</quote> you should only send
  					minimal data in order to reduce the transmitted data.
  				</para>
  			</note>
  			<note>
  				<para>
  					Ping requests should only be sent of no data was received
  					from the other peer for a while.
  				</para>
  			</note>
  			<para>
  				<variablelist><title>Message values</title>
  					<varlistentry>
  						<term>ping-data</term>
  						<listitem>
  							<para>Any data</para>
  						</listitem>
  					</varlistentry>
  				</variablelist>
  			</para>
  		</sect3>
  		
  		<sect3><title>CC_PONG (0x00000011)</title>
  			<para>
  				Reply to a CC_PING message. The field <quote>ping-data</quote>
  				must be copyied and sent back.
  			</para>
  			<para>
  				<variablelist><title>Message values</title>
  					<varlistentry>
  						<term>pong-data</term>
  						<listitem>
  							<para>
  								Data from the field <quote>ping-data</quote> of the
  								requesting CC_PING message.
  							</para>
  						</listitem>
  					</varlistentry>
  				</variablelist>
  			</para>
  		</sect3>
  		
  	</sect2>
  	
  </sect1>
  
  <sect1><title>Best practice</title>
  	<sect2><title>Sequence number errors</title>
  		<para>
  			This sections describes sever aproaches to handle sequence number errors.
  		</para>
  		<para>	
	  		First of all it is always good to detect them anyway. Later on this information
	  		can still be discarded if it is not needed.
  		</para>
  		
  		<sect3><title>Ignore them</title>
  			<para>
  				The easiest way to handle sequence number errors is to ignore them.
  				Given the fact that there will mostly be a connection based, stream oriented
  				transport layer that will compensate for transmission errors, it is
  				not too bad at all.
  			</para>
  			<para>
				Still it should be considered to log the occurrence of sequence errors
				somewhere.
  			</para>
  		</sect3>
  		
  		<sect3><title>Declare it as non-recovereable exception</title>
  			<para>
  				You can declare this as a <quote>non-recoverable exception</quote>
  				as described in <xref linkend="exceptions"/> and simple terminate the
  				connection (if you have one).
  			</para>
  		</sect3>
  		
  		<sect3><title>Re-transmit</title>
  			<para>
  				Especially for connection less transport layers you can consider to
  				re-transmit lost messages and to dicard duplicates.
  			</para>
  			<note>
  				<para>
  					If you choose to re-transmit messages you must ensure that the
  					sequence of messages is still correct. So assume you have a sequence
  					of 1, 2, 4, 5. You will request #3 to be re-transmitted. But until
  					the re-transmitted #3 arrives 4 and 5 must be held back for that time.
  				</para>
  			</note>
  		</sect3>
  	</sect2>
  	
  	<sect2><title>Preventing sequence number errors</title>
  		<para>
  			A common mistake generating sequence number errors is shown in the following
  			pseudo-code fragment:
  			
  			<programlisting>
  			<![CDATA[
class Connection {
  private:
    int _sequenceCounter = 1;
  public:
    void sendMessage ( Message message )
      {
        message.setSequenceNumber ( _sequenceCounter++ );
        ByteBuffer buffer = _codec.encode ( message );
        _socket.queueSend ( buffer );
        }
};
  			]]>
  			</programlisting>
  			Now assume you have a multi-threaded environment and several threads are
  			sending messages at the same time. There is no guarantee that the
  			messages are sent to the socket in the same sequence the got their sequence
  			number. So you need to make the cycle of assignment, encoding and queue for
  			send an atomic operation.
  		</para>
  	</sect2>
  	
  	<sect2><title>Message replies</title>
  		<para>
  			Although message replies are supported by the protocol you should
  			consider for each command code you create if a reply message is needed
  			or not. Message replies increase the traffic and are sometimes not
  			usefull to the application protocol you create.
  		</para>
  		<para>
  			Assume you have tree operations: subscribe, unsubscribe, notify. It is
  			quite usefull for the subscribe and unsubscribe messages to have a reply
  			message in order to tell the requester if the operation was successfull.
			But for the notify messages sent to the requester it is normally not needed.
			The sender of the notify message does not care if the message was processed or
			not and what the result of the processing was. Beside that you still have
			exceptions like sequence number errors or a broken connection which inform
			you of exceptions. But these exceptions are beside a reply message.
  		</para>
  	</sect2>
  	
  	<sect2><title>Handling message replies</title>
  		<para>
  			A good way to handle message replies is to add some listener functionality
  			to your implementation. When sending out a message you can then decide
  			wether or not you want to get notified for the result.
  		</para>
  		<para>
  			The following pseudo-code fragment shows how your application can then
  			use the message reply listener:
  			<programlisting>
  			<![CDATA[
class Application
{
  private:
    Connection _connection;
		
  public:
    void method ()
    {
      _connection.send ( new XXMessage (), new MessageListener () {
        void messageOK ( Message replyMessage )
          {
            // handle reply
            // note that the reply still can contain an error
          }
        void messageFailed ( Throwable error )
          {
            // handle error
          }
	   });
  }
};
  			]]>
  			</programlisting>
  		</para>
  	</sect2>
  	
  	<sect2><title>Use common message replies</title>
  		<para>
  			In the section <xref linkend="command_codes"/> are two messages
  			CC_ACK and CC_FAILED. If you need some simple answers (ok or failed)
  			these two can be used. This keeps implementations simpler since not
  			too many messages are defined.
  		</para>
  	</sect2>
    
    <sect2><title>Encoding values</title>
      <para>
        The following pseudo-code fragment shows how to easly implement value coding
        with sub values:
        <programlisting>
        <![CDATA[
class Value {
};

class StringValue : public Value {
};

class IntegerValue : public Value {
};

class ListValue : public Value {
};

class MapValue : public Value {
};

class Message {
  MapValue getRootValue ();
};

class ProtocolEncoder {
  
  void encodeString ( ByteBuffer buffer, String string )
  {
    buffer.putInt ( string.rawSize () );
    buffer.putBytes ( value.rawBytes () );
  }
  
  void encodeValue ( ByteBuffer buffer, StringValue value )
  {
    buffer.putInt ( VT_STRING );
    encodeString ( buffer, value.getString () );
  }
  
  void encodeValue ( ByteBuffer buffer, IntegerValue value )
  {
    buffer.putInt ( VT_INT );
    buffer.putInt ( 4 );
    buffer.putInt ( value.getInteger () );
  }
  
  void encodeValue ( ByteBuffer buffer, ListValue value )
  {
    buffer.putInt ( VT_LIST );
    int position = buffer.getPosition ();
    buffer.putInt ( 0 ); // dummy size
    buffer.putInt ( value.numberOfElements () );
    int startPosition = buffer.getPosition ();
    foreach ( Value value : value )
    {
      encodeValue ( value );
    }
    int size = buffer.getPosition () - startPosition;
    buffer.putInt ( position, size );
  }
  
  void encodeValue ( ByteBuffer buffer, MapValue value )
  {
    buffer.putInt ( VT_MAP );
    int position = buffer.getPosition ();
    buffer.putInt ( 0 ); // dummy size
    buffer.putInt ( value.numberOfElements () );
    int startPosition = buffer.getPosition ();
    foreach ( MapEntry entry : value )
    {
      encodeValue ( entry.getValue () );
      encodeString ( entry.getKey () );
    }
    int size = buffer.getPosition () - startPosition;
    buffer.putInt ( position, size );
  }
  
  void encodeValue ( ByteBuffer buffer, Value value )
  {
    switch ( value.getType () )
      case StringValue.getType ():
        encodeValue ( buffer, (StringValue)value );
        break;
      case IntegerValue.getType ():
        encodeValue ( buffer, (IntegerValue)value );
        break;
      case ListValue.getType ():
        encodeValue ( buffer, (ListValue)value );
        break;
      case MapValue.getType ():
        encodeValue ( buffer, (MapValue)value );
        break;
      default:
        throw ValueTypeNotSupportedException ();
  }
    
  ByteBuffer encode ( Message message )
  {
    ByteBuffer buffer = new ByteBuffer ();
    encodeCommonHeader ( buffer, message );
    encodeValue ( buffer, message.getValue () );
    return buffer;
  }
};
        ]]>
        </programlisting>
      </para>
    </sect2>
  </sect1>
  
  <sect1 id="exceptions"><title>Cases of exception</title>
  	<para>
  		There are two types of exceptions. Recoverable and non-recoverable exceptions.
  		The implementation decides which exception is recoverable and which is not.
  		e.g. an unknown data type can be handled in two ways. On the one hand the implementation
  		can simply raise a non-recoverable exception. On the other hand it could simply skip
  		the value by skipping the number of bytes that are specifies as data payload for this
  		value.
  	</para>
  	<sect2><title>Non-recoverable exceptions</title>
  		<para>
			For non-recoverable exceptions the connection (if the transport layer is
			connection based) should be terminated in order to indicate the failure to
			both peers of the connection.
	  	</para>
  		<para>
  			The following list is a non-complete example list of non-recoverable exceptions:
	  		<itemizedlist>
	  			<listitem>
	  				<para>Read/Write error</para>
	  			</listitem>
	  			<listitem>
	  				<para>Protocol Encoding/Decoding error</para>
	  			</listitem>
  			</itemizedlist>
	  	</para>
  	</sect2>
  	
  	<sect2><title>Recoverable exceptions</title>
  		<para>
  			Recoverable exceptions must be handled in a way that does not affect
  			other parts of the communication.
  		</para>
  		<para>
  			The following list is a non-complete example list of recoverable exceptions:
  			<itemizedlist>
  				<listitem>
  					<para>Unknown data type</para>
  				</listitem>
  			</itemizedlist>
  		</para>
  	</sect2>
  	
  </sect1>
  
  <appendix><title>GNU Free Documentation License</title>
  	<para>
  		<programlisting>
<![CDATA[
		GNU Free Documentation License
		  Version 1.2, November 2002


 Copyright (C) 2000,2001,2002  Free Software Foundation, Inc.
     51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.


0. PREAMBLE

The purpose of this License is to make a manual, textbook, or other
functional and useful document "free" in the sense of freedom: to
assure everyone the effective freedom to copy and redistribute it,
with or without modifying it, either commercially or noncommercially.
Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible
for modifications made by others.

This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.


1. APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work, in any medium, that
contains a notice placed by the copyright holder saying it can be
distributed under the terms of this License.  Such a notice grants a
world-wide, royalty-free license, unlimited in duration, to use that
work under the conditions stated herein.  The "Document", below,
refers to any such manual or work.  Any member of the public is a
licensee, and is addressed as "you".  You accept the license if you
copy, modify or distribute the work in a way requiring permission
under copyright law.

A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A "Secondary Section" is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall subject
(or to related matters) and contains nothing that could fall directly
within that overall subject.  (Thus, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any
mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.  If a
section does not fit the above definition of Secondary then it is not
allowed to be designated as Invariant.  The Document may contain zero
Invariant Sections.  If the Document does not identify any Invariant
Sections then there are none.

The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.  A Front-Cover Text may
be at most 5 words, and a Back-Cover Text may be at most 25 words.

A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, that is suitable for revising the document
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup, or absence of markup, has been arranged to thwart
or discourage subsequent modification by readers is not Transparent.
An image format is not Transparent if used for any substantial amount
of text.  A copy that is not "Transparent" is called "Opaque".

Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML
or XML using a publicly available DTD, and standard-conforming simple
HTML, PostScript or PDF designed for human modification.  Examples of
transparent image formats include PNG, XCF and JPG.  Opaque formats
include proprietary formats that can be read and edited only by
proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the
machine-generated HTML, PostScript or PDF produced by some word
processors for output purposes only.

The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, "Title Page" means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

A section "Entitled XYZ" means a named subunit of the Document whose
title either is precisely XYZ or contains XYZ in parentheses following
text that translates XYZ in another language.  (Here XYZ stands for a
specific section name mentioned below, such as "Acknowledgements",
"Dedications", "Endorsements", or "History".)  To "Preserve the Title"
of such a section when you modify the Document means that it remains a
section "Entitled XYZ" according to this definition.

The Document may include Warranty Disclaimers next to the notice which
states that this License applies to the Document.  These Warranty
Disclaimers are considered to be included by reference in this
License, but only as regards disclaiming warranties: any other
implication that these Warranty Disclaimers may have is void and has
no effect on the meaning of this License.


2. VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.


3. COPYING IN QUANTITY

If you publish printed copies (or copies in media that commonly have
printed covers) of the Document, numbering more than 100, and the
Document's license notice requires Cover Texts, you must enclose the
copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a computer-network location from which the general network-using
public has access to download using public-standard network protocols
a complete Transparent copy of the Document, free of added material.
If you use the latter option, you must take reasonably prudent steps,
when you begin distribution of Opaque copies in quantity, to ensure
that this Transparent copy will remain thus accessible at the stated
location until at least one year after the last time you distribute an
Opaque copy (directly or through your agents or retailers) of that
edition to the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.


4. MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

A. Use in the Title Page (and on the covers, if any) a title distinct
   from that of the Document, and from those of previous versions
   (which should, if there were any, be listed in the History section
   of the Document).  You may use the same title as a previous version
   if the original publisher of that version gives permission.
B. List on the Title Page, as authors, one or more persons or entities
   responsible for authorship of the modifications in the Modified
   Version, together with at least five of the principal authors of the
   Document (all of its principal authors, if it has fewer than five),
   unless they release you from this requirement.
C. State on the Title page the name of the publisher of the
   Modified Version, as the publisher.
D. Preserve all the copyright notices of the Document.
E. Add an appropriate copyright notice for your modifications
   adjacent to the other copyright notices.
F. Include, immediately after the copyright notices, a license notice
   giving the public permission to use the Modified Version under the
   terms of this License, in the form shown in the Addendum below.
G. Preserve in that license notice the full lists of Invariant Sections
   and required Cover Texts given in the Document's license notice.
H. Include an unaltered copy of this License.
I. Preserve the section Entitled "History", Preserve its Title, and add
   to it an item stating at least the title, year, new authors, and
   publisher of the Modified Version as given on the Title Page.  If
   there is no section Entitled "History" in the Document, create one
   stating the title, year, authors, and publisher of the Document as
   given on its Title Page, then add an item describing the Modified
   Version as stated in the previous sentence.
J. Preserve the network location, if any, given in the Document for
   public access to a Transparent copy of the Document, and likewise
   the network locations given in the Document for previous versions
   it was based on.  These may be placed in the "History" section.
   You may omit a network location for a work that was published at
   least four years before the Document itself, or if the original
   publisher of the version it refers to gives permission.
K. For any section Entitled "Acknowledgements" or "Dedications",
   Preserve the Title of the section, and preserve in the section all
   the substance and tone of each of the contributor acknowledgements
   and/or dedications given therein.
L. Preserve all the Invariant Sections of the Document,
   unaltered in their text and in their titles.  Section numbers
   or the equivalent are not considered part of the section titles.
M. Delete any section Entitled "Endorsements".  Such a section
   may not be included in the Modified Version.
N. Do not retitle any existing section to be Entitled "Endorsements"
   or to conflict in title with any Invariant Section.
O. Preserve any Warranty Disclaimers.

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section Entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various
parties-for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.


5. COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice, and that you preserve all their Warranty Disclaimers.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections Entitled "History"
in the various original documents, forming one section Entitled
"History"; likewise combine any sections Entitled "Acknowledgements",
and any sections Entitled "Dedications".  You must delete all sections
Entitled "Endorsements".


6. COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.

You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.


7. AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, is called an "aggregate" if the copyright
resulting from the compilation is not used to limit the legal rights
of the compilation's users beyond what the individual works permit.
When the Document is included in an aggregate, this License does not
apply to the other works in the aggregate which are not themselves
derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one half of
the entire aggregate, the Document's Cover Texts may be placed on
covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form.
Otherwise they must appear on printed covers that bracket the whole
aggregate.


8. TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License, and all the license notices in the
Document, and any Warranty Disclaimers, provided that you also include
the original English version of this License and the original versions
of those notices and disclaimers.  In case of a disagreement between
the translation and the original version of this License or a notice
or disclaimer, the original version will prevail.

If a section in the Document is Entitled "Acknowledgements",
"Dedications", or "History", the requirement (section 4) to Preserve
its Title (section 1) will typically require changing the actual
title.


9. TERMINATION

You may not copy, modify, sublicense, or distribute the Document except
as expressly provided for under this License.  Any other attempt to
copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this
License will not have their licenses terminated so long as such
parties remain in full compliance.


10. FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
http://www.gnu.org/copyleft/.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.
]]>
  		</programlisting>
  	</para>
  </appendix>
  
</article>
