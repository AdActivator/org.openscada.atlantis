<?xml version="1.0" encoding="UTF-8"?>

<project name="openscada_da_doc_net" default="all">
	
	<property name="deploy.dir" location="${basedir}/deploy"/>
	<property name="lib.dir" location="${basedir}/lib"/>
	
	<property name="docbook.dir" location="${basedir}/docbook"/>
	<property name="docbook.dir.images" location="${docbook.dir}/images"/>
	
	<property name="common.dir" location="${basedir}/docs/common"/>
	<property name="common.dir.images" location="${common.dir}/images"/>
	
	<property name="temp.dir" location="${java.io.tmpdir}"/>
	
	<target name="all" depends="clean, html, fopdf, texpdf"/>
	
	<target name="clean">
		<delete dir="${deploy.dir}" failonerror="false"/>
	</target>
	
	<target name="html" depends="clean, render_html" unless="skip.html"/>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: docbook.xhtml          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="docbook.xhtml">
        <attribute name="dir"/>
    	<attribute name="output"/>
    	<attribute name="outputName"/>
        <sequential>
        	<mkdir dir="@{output}/@{outputName}"/>
        	<docbook dir="@{dir}" style="xhtml" output="@{output}/@{outputName}"/>
        	<copyImages dir="@{dir}" output="@{output}" outputName="@{outputName}"/>
        </sequential>
    	
    </macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: copyImages          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="copyImages">
    	<attribute name="dir"/>
    	<attribute name="output"/>
    	<attribute name="outputName" />
        <sequential>
        	<mkdir dir="@{output}/@{outputName}/images"/>
	    	<mkdir dir="@{output}/@{outputName}/docbook/images"/>
	    	<copy todir="@{output}/@{outputName}/docbook/images">
	    		<fileset dir="${docbook.dir.images}">
	    			<include name="**/*.gif"/>
	    			<include name="**/*.jpg"/>
	    			<include name="**/*.png"/>
	    			<include name="**/*.svg"/>
	    			<include name="**/*.pdf"/>
	    			<include name="**/*.eps"/>
	    		</fileset>
	    	</copy>
        	<copy todir="@{output}/@{outputName}/docbook/images">
	    		<fileset dir="${common.dir.images}">
	    			<include name="**/*.gif"/>
	    			<include name="**/*.jpg"/>
	    			<include name="**/*.png"/>
	    			<include name="**/*.svg"/>
	    			<include name="**/*.pdf"/>
	    			<include name="**/*.eps"/>
	    		</fileset>
	    	</copy>
        	<copy todir="@{output}/@{outputName}/images">
	    		<fileset dir="@{dir}/src/images">
	    			<include name="**/*.gif"/>
	    			<include name="**/*.jpg"/>
	    			<include name="**/*.png"/>
	    			<include name="**/*.svg"/>
	    			<include name="**/*.pdf"/>
	    			<include name="**/*.eps"/>
	    		</fileset>
	    	</copy>
        </sequential>
    </macrodef>


	<!-- = = = = = = = = = = = = = = = = =
          macrodef: prepareDocbook          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="prepareDocbook">
        <attribute name="dir" default="" />
        <sequential>
        	<delete dir="@{dir}.transform"/>
        	<mkdir dir="@{dir}.transform"/>
        	
        	<copy todir="@{dir}.transform">
        		<fileset dir="@{dir}">
        		</fileset>
        	</copy>
        	
        	<copy todir="@{dir}.transform" overwrite="true">
        		<fileset dir="@{dir}">
        			<exclude name="**/index.xml"/>
        			<include name="**/*.xml"/>
        		</fileset>
        		<filterchain>
        			<linecontains negate="true">
        			  <contains value="-//OASIS//DTD DocBook XML V4.4//EN"/>
        			</linecontains>
        		</filterchain>
        	</copy>
        </sequential>
    </macrodef>

	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: docbook          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="docbook">
    	<attribute name="dir"/>
    	<attribute name="style"/>
    	<attribute name="output"/>
    	<attribute name="options" default=""/>
    	<attribute name="params" default=""/>
        <sequential>
        	<prepareDocbook dir="@{dir}"/>
        		
        	<java classname="com.icl.saxon.StyleSheet" fork="true" dir="@{output}">
	  			<classpath>
	  				<fileset dir="${lib.dir}">
	  					<include name="**/*.jar"/>
	  				</fileset>
	  			</classpath>
	  			<jvmarg value="-Xmx256M"/>
	  			<jvmarg value="-XX:MaxPermSize=128m"/>
        		<arg line="@{options}"/>
	  			<arg value="@{dir}.transform/src/index.xml"/>
	  			<arg value="@{dir}/style/@{style}.xsl"/>
        		<arg line="@{params}"/>
	  		</java>
        	<delete dir="@{dir}.transform"/>
        </sequential>
    </macrodef>
	
	<target name="render_html" unless="skip.html">
		<mkdir dir="${deploy.dir}/html"/>
		<docbook.xhtml dir="${basedir}/docs/reference" output="${deploy.dir}/html" outputName="reference"/>
		<docbook.xhtml dir="${basedir}/docs/userguide" output="${deploy.dir}/html" outputName="userguide"/>
	</target>
	

	<target name="render_fopdf" unless="skip.fop">
		<mkdir dir="${deploy.dir}/pdf"/>
		<docbook.fopdf dir="${basedir}/docs/reference" output="${deploy.dir}/pdf" outputName="reference"/>
		<docbook.fopdf dir="${basedir}/docs/userguide" output="${deploy.dir}/pdf" outputName="userguide"/>
	</target>
	
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: docbook.fopdf          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="docbook.fopdf">
        <attribute name="dir" />
    	<attribute name="output" />
    	<attribute name="outputName" />
        <sequential>

        	<docbook dir="@{dir}" style="fopdf" output="@{output}" options="-o @{outputName}.fo" params="double.sided=false"/>
        	<copyImages dir="@{dir}" output="@{output}" outputName=""/>
        	
			<antcall target="fop">
				<param name="output" value="@{output}"/>
				<param name="outputName" value="@{outputName}"/>
        	</antcall>
        	
        </sequential>
    </macrodef>

	<!-- ================================= 
          target: foponly              
         ================================= -->
    <target name="foponly" depends="" description="Testing fop">
    	<antcall target="fop">
			<param name="output" value="${deploy.dir}/pdf"/>
			<param name="outputName" value="reference"/>
    	</antcall>
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: fop                      
         - - - - - - - - - - - - - - - - - -->
    <target name="fop">
    	<java classname="org.apache.fop.cli.Main" fork="true" maxmemory="256m" >
  			<classpath>
  				<fileset dir="${basedir}/fopnew">
  					<include name="**/*.jar"/>
				</fileset>
  			</classpath>
  			<arg value="${output}/${outputName}.fo"/>
  			<arg value="${output}/${outputName}.pdf"/>
  		</java>
    </target>

		
	<target name="fopdf" depends="clean, render_fopdf" unless="skip.fop"/>
	
	<target name="texpdf" depends="clean, render_texpdf" unless="skip.tex"/>
	
	<target name="render_texpdf" unless="skip.tex">
		<mkdir dir="${deploy.dir}/pdf"/>
		<docbook.texpdf dir="${basedir}/docs/reference" output="${deploy.dir}/pdf" outputName="reference"/>
		<docbook.texpdf dir="${basedir}/docs/userguide" output="${deploy.dir}/pdf" outputName="userguide"/>
	</target>
	
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: docbook.texpdf          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="docbook.texpdf">
        <attribute name="dir" />
    	<attribute name="output" />
    	<attribute name="outputName" />
        <sequential>

        	<prepareDocbook dir="@{dir}"/>
        	<copyImages dir="@{dir}" output="@{output}" outputName="@{outputName}"/>

        	<mkdir dir="${deploy.dir}/pdf/@{outputName}"/>
        	
        	<echo message="dir: @{dir}"/>
        	
        	<exec dir="@{dir}" executable="docbook2pdf" failonerror="true">
        		<arg file="@{dir}.transform/src/index.xml"/>
        		<arg value="-o"/>
        		<arg value="${deploy.dir}/pdf/@{outputName}"/>
        		<arg value="-d"/>
        		<arg value="@{dir}/../common/style/driver.sgml"/>
        	</exec>
        	
        	<copy file="${deploy.dir}/pdf/@{outputName}/index.pdf" tofile="${deploy.dir}/pdf/@{outputName}.pdf"/>
        	<delete dir="${deploy.dir}/pdf/@{outputName}"/>
        	
        </sequential>
    </macrodef>

</project>
