<?xml version="1.0"?>
<!-- ====================================================================== 
     OpenSCADA Atlantis    
     Master build file for OpenSCADA Atlabtis
                   
	 Jens Reimann <jens.reimann@inavare.net>
     ====================================================================== -->
<project name="OpenSCADA Atlantis" default="default">
    <description>
            Master build file for OpenSCADA Atlantis
    </description>

	<property name="version" value="0.5.0"/>
	<property name="release" value=""/>
	<property name="buildType" value="R"/>
	<property name="buildId" value="Release-${version}"/>
	<property name="tag" value="${version}${release}"/>
	
	<property name="source.base" location="../.."/>
	
	<property name="url.base" value="http://openscada.org/download/atlantis"/>
	<property name="url.dir" value="${url.base}/${tag}"/>
	<property name="url.dist.project" value="${url.dir}/project"/>
	
	<property name="deploy.base" value="/var/vhosts/openscada/download/atlantis"/>
	<property name="deploy.dir" value="${deploy.base}/${tag}"/>
	<property name="deploy.dist.module" value="${deploy.dir}/module"/>
	<property name="deploy.dist.source" value="${deploy.dir}/source"/>
	<property name="deploy.dist.binary" value="${deploy.dir}/binary"/>
	<property name="deploy.dist.project" value="${deploy.dir}/project"/>
	<property name="deploy.additional" value="${deploy.dir}/additional"/>
	
	<property name="file.genworkspace" value="${deploy.additional}/prepareimport.xml"/>
	
	<property name="temp.dir" location="/tmp/atlantis"/>
	
	<property name="build.dir" value="${temp.dir}/build"/>
	<property name="libfile" location="../lib/build.xml"/>
	
	<property name="module.dep.file" location="${deploy.additional}/module.deps"/>
	
	<import file="${libfile}"/>
	
    <!-- ================================= 
          target: default              
         ================================= -->
    <target name="default" depends="clean, init, build, dist-source, dist-binary, rcp, apps, make-ice-documentation" description="--> Master build file for OpenSCADA Atlabtis">
    </target>
    
    <target name="init.genworkspace">
    	<!-- init genworkspace XML buffer -->
    	<dirname property="dir" file="${file.genworkspace}"/>
    	<mkdir dir="${dir}"/>
    	<xmltask source="${source.base}/build/data/genworkspace.xml" dest="${file.genworkspace}"/>
    </target>
    
    <target name="build.post.genworkspace">
    	<xmltask source="${file.genworkspace}" dest="${file.genworkspace}" outputter="simple:2"/>
    </target>
	
	<!-- ================================= 
          target: build              
         ================================= -->
    <target name="build" depends="init, init.genworkspace" description="--> Build all">
    	<mkdir dir="${temp.dir}"/>
    	
    	<!-- init dependency file -->
    	<concat append="false" destfile="${module.dep.file}">
    		<path location="${source.base}/build/data/module.deps.header"/>
    	</concat>
    	
    	<mkdir dir="${deploy.dir}"/>
    	<copy file="../data/htaccess" tofile="${deploy.dir}/.htaccess"/>
    	
    	<ant dir="${source.base}/external/log4j"/>
    	<ant dir="${source.base}/external/icej"/>
       	<ant dir="${source.base}/external/xmlbeans"/>
       	<ant dir="${source.base}/external/junit4"/>
       	<ant dir="${source.base}/external/mibble"/>
       	<ant dir="${source.base}/external/SNMP4J"/>
       		
    	<ant dir="${source.base}/utils"/>
    	<ant dir="${source.base}/core/common"/>
       	<ant dir="${source.base}/net/base"/>
       	<ant dir="${source.base}/core/server/common"/>
		<ant dir="${source.base}/core/ice/base"/>
       	<ant dir="${source.base}/core/net/base"/>
       	<ant dir="${source.base}/da/core/common"/>
       	<ant dir="${source.base}/da/core/server"/>
       	<ant dir="${source.base}/da/server/common"/>
    	<ant dir="${source.base}/da/ice/base"/>
       	<ant dir="${source.base}/da/net/base"/>
      	<ant dir="${source.base}/da/server/net"/>
       	<ant dir="${source.base}/da/server/simulation"/>
       	<ant dir="${source.base}/da/server/snmp"/>
      	<ant dir="${source.base}/da/server/sysinfo"/>
      	<ant dir="${source.base}/da/server/test"/>

	   	<ant dir="${source.base}/core/client/common"/>
       	<ant dir="${source.base}/core/client/net"/>
	   	<ant dir="${source.base}/da/client/common"/>
       	<ant dir="${source.base}/da/client/ice"/>
		<ant dir="${source.base}/da/client/net"/>
    	
		<ant dir="${source.base}/da/client/samples"/>
    	
    	<ant dir="${source.base}/ae/core/common"/>
    	<ant dir="${source.base}/ae/net/base"/>
    	<ant dir="${source.base}/ae/storage/common"/>
   		<ant dir="${source.base}/ae/client/common"/>
		<ant dir="${source.base}/ae/client/net"/>
    	<ant dir="${source.base}/ae/storage/test"/>
    	<ant dir="${source.base}/ae/storage/syslog"/>
    	<ant dir="${source.base}/ae/submitter/net"/>
       	<ant dir="${source.base}/ae/storage/net"/>
	
    	<concat append="true" destfile="${module.dep.file}">
    		<path location="${source.base}/build/data/module.deps.footer"/>
    	</concat>
    	
    	<antcall target="build.post.genworkspace"/>

    </target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: clean                      
         - - - - - - - - - - - - - - - - - -->
    <target name="clean" depends="init">
        <delete dir="${deploy.dir}"/>
    	<delete dir="${build.dir}"/>
    	<delete dir="${temp.dir}"/>
    </target>

	
    <!-- - - - - - - - - - - - - - - - - - 
          target: init                      
         - - - - - - - - - - - - - - - - - -->
    <target name="init">
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: dist-source
         - - - - - - - - - - - - - - - - - -->
    <target name="dist-source" depends="build, dist-binary">
    	<mkdir dir="${build.dir}/dist-source"/>
    	<unzip dest="${build.dir}/dist-source">
    		<fileset dir="${deploy.dist.module}">
    			<include name="**/*.zip"/>
    		</fileset>
    		<patternset>
    			<include name="src/**"/>
    		</patternset>
    	</unzip>
	
		<!-- create an "all in one" javadoc -->
		<mkdir dir="${deploy.dir}/doc/api"/>
		<javadoc destdir="${deploy.dir}/doc/api"
	       	author="true"
	       	version="true"
	       	use="true"
	       	encoding="utf-8"
	       	>
	       	<tag name="note" description="Note" scope="all"/>
	       	<tag name="warning" description="Warning" scope="all"/>
	       	<packageset dir="${build.dir}/dist-source/src" defaultexcludes="yes">
	       		<include name="**"/>
	       	</packageset>
			<classpath>
				<fileset dir="${build.dir}/dist-binary/lib">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${build.dir}/dist-binary/bin">
					<include name="*.jar"/>
				</fileset>
	  		</classpath>
		</javadoc>
	
    	<!-- re-package -->
    	<mkdir dir="${deploy.dist.source}"/>
    	<zip basedir="${build.dir}/dist-source" destfile="${deploy.dist.source}/openscada-atlantis-source-${tag}.zip">
    	</zip>
	
		<!-- pack up javadoc -->
		<zip basedir="${deploy.dir}/doc/api" destfile="${deploy.dist.source}/openscada-atlantis-doc-${tag}.zip">
		</zip>
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: dist-binary
         - - - - - - - - - - - - - - - - - -->
    <target name="dist-binary" depends="build">
    	<!-- unpack what we need -->
    	<mkdir dir="${build.dir}/dist-binary"/>
    	<unzip dest="${build.dir}/dist-binary">
    		<fileset dir="${deploy.dist.module}">
    			<include name="**/*.zip"/>
    		</fileset>
    		<patternset>
    			<include name="bin/**"/>
       			<include name="lib/**"/>
    		</patternset>
    	</unzip>
    	
    	<!-- re-pack it -->
    	<mkdir dir="${deploy.dist.binary}"/>
    	<zip basedir="${build.dir}/dist-binary" destfile="${deploy.dist.binary}/openscada-atlantis-bin-${tag}.zip">
    	</zip>
    </target>

	<!-- ================================= 
          target: rcp              
         ================================= -->
    <target name="rcp" depends="build" description="--> Build RCP Application">
		<ant antfile="build.xml" dir="../rcp">
			<property name="eclipse.home" value="/home/user/eclipse"/>
			<property name="eclipse.builder.version" value="_3.2.0.v20060603"/>
			<property name="upload.base.ostc" value="${deploy.dir}/ostc"/>
    	</ant>
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: apps                      
         - - - - - - - - - - - - - - - - - -->
    <target name="apps" depends="make-sim-server-dist, make-test-server-dist">
    </target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: make-sim-server-dist                      
         - - - - - - - - - - - - - - - - - -->
    <target name="make-sim-server-dist" depends="">
		<delete dir="${temp.dir}/dist-sim-server"/>
	
		<openscada.unpack-module name="da-server-net" todir="${temp.dir}/dist-sim-server"/>
		<openscada.unpack-module name="da-server-simulation" todir="${temp.dir}/dist-sim-server"/>

		<openscada.runfile.init file="${temp.dir}/dist-sim-server/runfile.xml"/>
    	<openscada.runfile.gather-jars file="${temp.dir}/dist-sim-server/runfile.xml" dir="${temp.dir}/dist-sim-server"/>
		<openscada.runfile.arg.add file="${temp.dir}/dist-sim-server/runfile.xml" value="org.openscada.da.server.simulation.Hive"/>
		<openscada.runfile.set-main file="${temp.dir}/dist-sim-server/runfile.xml" value="org.openscada.da.server.net.Application"/>
		<openscada.runfile.transform dir="${temp.dir}/dist-sim-server"/>

		<mkdir dir="${deploy.dist.binary}/"/>
		<zip basedir="${temp.dir}/dist-sim-server" destfile="${deploy.dist.binary}/openscada-atlantis-simserver-net-${tag}.zip">
		</zip>
		
    </target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: make-test-server-dist                      
         - - - - - - - - - - - - - - - - - -->
    <target name="make-test-server-dist" depends="">
		<delete dir="${temp.dir}/dist-test-server"/>
	
		<openscada.unpack-module name="da-server-net" todir="${temp.dir}/dist-test-server"/>
		<openscada.unpack-module name="da-server-test" todir="${temp.dir}/dist-test-server"/>

		<openscada.runfile.init file="${temp.dir}/dist-test-server/runfile.xml"/>
    	<openscada.runfile.gather-jars file="${temp.dir}/dist-test-server/runfile.xml" dir="${temp.dir}/dist-test-server"/>
		<openscada.runfile.arg.add file="${temp.dir}/dist-test-server/runfile.xml" value="org.openscada.da.server.test.Hive"/>
		<openscada.runfile.set-main file="${temp.dir}/dist-test-server/runfile.xml" value="org.openscada.da.server.net.Application"/>
		<openscada.runfile.transform dir="${temp.dir}/dist-test-server"/>

		<mkdir dir="${deploy.dist.binary}/"/>
		<zip basedir="${temp.dir}/dist-test-server" destfile="${deploy.dist.binary}/openscada-atlantis-testserver-net-${tag}.zip">
		</zip>
		
    </target>
	
	<!-- ================================= 
          target: make-ice-documentation              
         ================================= -->
    <target name="make-ice-documentation" depends="" description="--> Generate the ICE documentation">
		<mkdir dir="${deploy.dir}/doc/ice/sgml"/>
		<mkdir dir="${deploy.dir}/doc/ice/html"/>
		<mkdir dir="${deploy.dir}/doc/ice/pdf"/>
        <exec executable="slice2docbook" failonerror="true">
			<arg line="-s"/>
			<arg line="${deploy.dir}/doc/ice/sgml/openscada.sgml"/>
			<arg line="${source.base}/interface/ice/core/core.ice"/>
			<arg line="${source.base}/interface/ice/da/da.ice"/>
		</exec>
    	<parallel>
			<exec executable="docbook2html" failonerror="true" dir="${deploy.dir}/doc/ice/html">
				<arg line="${deploy.dir}/doc/ice/sgml/openscada.sgml"/>
			</exec>
			<exec executable="docbook2pdf" failonerror="true" dir="${deploy.dir}/doc/ice/pdf">
				<arg line="${deploy.dir}/doc/ice/sgml/openscada.sgml"/>
			</exec>
		</parallel>
    </target>



</project>
