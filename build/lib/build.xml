<?xml version="1.0"?>
<!-- ====================================================================== 
     OpenSCADA Atlantis Build Tools File    
     Providing common build targets for all other ant-scripts
                   
	 Jens Reimann <jens.reimann@inavare.net>
     ====================================================================== -->
<project name="OpenSCADA Atlantis Build Tools File" default="default">
    <description>
    	Providing common build targets for all other ant-scripts
    </description>
	
	<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask">
		<classpath>
			<pathelement location="${source.base}/build/lib/xmltask-v1.14.jar"/>
		</classpath>
	</taskdef>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
	  <classpath>
	    <pathelement location="${source.base}/build/lib/ant-contrib-1.0b3.jar"/>
	  	<pathelement location="${source.base}/build/lib/bcel-5.1.jar"/>
	  	<pathelement location="${source.base}/build/lib/commons-httpclient-3.0.1.jar"/>
	  	<pathelement location="${source.base}/build/lib/commons-logging-1.0.4.jar"/>
	  	<pathelement location="${source.base}/build/lib/ivy-1.3.1.jar"/>
	  </classpath>
	</taskdef>
	
	<import file="append-line.xml"/>
	
	<!-- ================================= 
          target: default              
         ================================= -->
    <target name="default" description="--> Nothing">
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          macrodef: openscada.pull-in-lib
          Unpack a deployed archive and copy the libraries into the build-lib folder
         - - - - - - - - - - - - - - - - - -->
    <macrodef name="openscada.pull-in-lib">
    	<attribute name="name"/>
    	<sequential>
	    	<mkdir dir="${build.dir}/lib"/>
	    	<mkdir dir="${build.dir}/bin"/>
	    	<unzip src="${deploy.dist.module}/@{name}.zip" dest="${build.dir}">
	    		<patternset>
	    			<include name="lib/*.jar"/>
	    			<include name="bin/*.jar"/>
	    		</patternset>
	   		</unzip>
			<mkdir dir="${temp.dir}/deps"/>
			<append-line file="${temp.dir}/deps/@{name}.deps">${package} -&gt; @{name}</append-line>
    	</sequential>
    </macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.pull-in-external-lib          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.pull-in-external-lib">
        <attribute name="name"/>
        <sequential>
            <openscada.pull-in-lib name="external-@{name}"/>
        </sequential>
    </macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.pull-in-module          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.pull-in-module">
        <attribute name="name" />
        <sequential>
        	<openscada.pull-in-lib name="openscada-@{name}-${tag}"/>
        </sequential>
    </macrodef>

	<!-- - - - - - - - - - - - - - - - - - 
          macrodef: openscada.prepare-local-libs  
          Copy the local libraries into the build-lib folder                    
         - - - - - - - - - - - - - - - - - -->
    <macrodef name="openscada.prepare-local-libs">
    	<sequential>
			<copy todir="${build.dir}/lib" failonerror="false">
				<fileset dir="lib">
					<exclude name="**/.svn"/>
				</fileset>
	    	</copy>
    	</sequential>
    </macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.export.license          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.export.license">
        <sequential>
    		<copy file="COPYING" todir="${build.dir}"/>
        </sequential>
    </macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.export.source          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.export.source">
        <sequential>
    		<mkdir dir="${build.dir}/src"/>
    		<copy todir="${build.dir}/src">
    			<fileset dir="src">
    				<exclude name="**/.svn"/>
    			</fileset>
    		</copy>
        </sequential>
    </macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.compile.javadoc          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.compile.javadoc">
        <sequential>
    	   	<mkdir dir="${build.dir}/docs/api"/>
      		<javadoc destdir="${build.dir}/docs/api"
    	       	author="true"
    	       	version="true"
    	       	use="true"
    	       	encoding="utf-8"
    	       	>
    	       	<tag name="note" description="Note" scope="all"/>
    	       	<tag name="warning" description="Warning" scope="all"/>
    	       	<packageset dir="src" defaultexcludes="yes">
    	       		<include name="**"/>
    	       	</packageset>
    			<classpath>
    				<fileset dir="${build.dir}/lib">
    					<include name="*.jar"/>
    				</fileset>
    				<fileset dir="${build.dir}/bin">
    					<include name="*.jar"/>
    				</fileset>
    	  		</classpath>
    		</javadoc>
        </sequential>
    </macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.compile.source          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.compile.source">
        <sequential>
    		<mkdir dir="bin"/>
    		<javac
    			encoding="utf-8"
    			source="1.5"
    			target="1.5"
    			srcdir="src"
    			destdir="bin"
    			>
    			<classpath>
    				<fileset dir="${build.dir}/lib">
    					<include name="**/*.jar"/>
    				</fileset>
       				<fileset dir="${build.dir}/bin">
       					<include name="*.jar"/>
       				</fileset>
    				<pathelement location="schemabin"/>
    			</classpath>
    		</javac>
        </sequential>
    </macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.common.build          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.common.build">
        <sequential>
        	<openscada.compile.schema/>
    		<openscada.compile.source/>
    		<openscada.compile.javadoc/>
    		<openscada.export.source/>
    		<openscada.export.license/>
        </sequential>
    </macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.common.deploy          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.common.deploy">
        <sequential>
    		<mkdir dir="${build.dir}/bin"/>
        	<mkdir dir="schemabin"/>
    		<jar destfile="${build.dir}/bin/openscada-${package}-${tag}.jar">
    			<fileset dir="bin">
    				<include name="**/*.class"/>
    			</fileset>
    			<fileset dir="schemabin"/>
    		</jar>

    		<mkdir dir="${deploy.dir}"/>
    		<zip basedir="${build.dir}" destfile="${deploy.dist.module}/openscada-${package}-${tag}.zip">
    			<include name="**/*"/>
    		</zip>
        </sequential>
    </macrodef>
	
	<taskdef name="xmlbean" classname="org.apache.xmlbeans.impl.tool.XMLBean">
		 <classpath id="xmlbeanspath">
            <pathelement location="${source.base}/external/xmlbeans/xbean.jar"/>
            <pathelement location="${source.base}/external/xmlbeans/jsr173_1.0_api.jar"/>
         </classpath>
	</taskdef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.compile.schema
          Compile the schema files
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.compile.schema">
        <sequential>
        	<if>
        		<available type="dir" file="schema"/>
        		<then>
		        	<mkdir dir="schemabin"/>
	    	    	<xmlbean
	   					failonerror="true"
	   					classgendir="schemabin"
						javasource="1.5"
			            classpathref="xmlbeanspath"
						>
							<fileset dir="schema" includes="*.xsd"/>
		        	</xmlbean>
        		</then>
        	</if>
		</sequential>
    </macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.deploy.external          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.deploy.external">
        <sequential>
        	<mkdir dir="${deploy.dist.module}"/>
        	<zip basedir="${build.dir}" file="${deploy.dist.module}/external-${package}.zip">
        	</zip>
        </sequential>
    </macrodef>

	
</project>
