«IMPORT metamodel»

«EXTENSION template::GeneratorExtensions»

«DEFINE main FOR Model»
	«EXPAND main FOREACH this.packages()»
«ENDDEFINE»

«DEFINE main FOR Package»
	«EXPAND main FOREACH this.packages»
	«EXPAND javaClass FOREACH this.types.typeSelect(Message)»
«ENDDEFINE»

«DEFINE javaClass FOR Message»
	«FILE this.typeFileNameFq() + ".java"»
		
		«IF this.package() != null»
		package «this.package().packageClassNameFq()»;
		«ENDIF»
		
		public class «name» {
		
			«IF this.metaType==Message»
			public static final long MESSAGE_CODE = «((Message)this).messageCode»L;
			«ENDIF»
			
			public «name» ()
			{
			}
			
			public «name» (
				«EXPAND ctorVariables FOREACH this.attributes SEPARATOR ","»
			)
			{
				«EXPAND ctorAssignments FOREACH this.attributes»
			}
			
			«EXPAND attributeAccess FOREACH this.attributes»
			
			«EXPAND fromMessage FOR this»
			«EXPAND toMessage FOR this»
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE ctorVariables FOR Attribute»
	final «this.attributeJavaType()» «this.name»
«ENDDEFINE»

«DEFINE ctorAssignments FOR Attribute»
	this.«this.name» = «this.name»;
«ENDDEFINE»

«REM»Attribute Access«ENDREM»

«DEFINE attributeAccess FOR Attribute»
«ENDDEFINE»

«DEFINE attributeAccess FOR FlagAttribute»
private boolean «this.name»;

public void «this.setter()»( final boolean «this.name» )
{
	this.«this.name» = «this.name»;
}

public boolean «this.getter()»()
{
	return this.«this.name»;
}
«ENDDEFINE»

«DEFINE attributeAccess FOR BasicAttribute»

«IF this.list»
private java.util.Collection<«this.type.javaType()»> «this.name»;

public void «this.setter()»( final java.util.Collection<«this.type.javaType()»> «this.name» )
{
	this.«this.name» = «this.name»;
}

public java.util.Collection<«this.type.javaType()»> «this.getter()»()
{
	return this.«this.name»;
}
«ELSE»
private «this.type.javaType()» «this.name»;

public void «this.setter()»( final «this.type.javaType()» «this.name» )
{
	this.«this.name» = «this.name»;
}

public «this.type.javaType()» «this.getter()»()
{
	return this.«this.name»;
}

«ENDIF»
«ENDDEFINE»

«DEFINE attributeAccess FOR RefAttribute»
public void «this.setter()»( final «this.type.name» «this.name» )
{
}

public «this.type.name» «this.getter()»()
{
}
«ENDDEFINE»

«DEFINE attributeAccess FOR MapAttribute»

«IF this.list»
private java.util.Collection<java.util.Map<String, org.openscada.core.Variant>> «this.name»;

public void «this.setter()»( final java.util.Collection<java.util.Map<String, org.openscada.core.Variant>> «this.name» )
{
	this.«this.name» = «this.name»;
}

public java.util.Collection<java.util.Map<String, org.openscada.core.Variant>> «this.getter()»()
{
	return this.«this.name»;
}
«ELSE»
private java.util.Map<String, org.openscada.core.Variant> «this.name»;

public void «this.setter()»( final java.util.Map<String, org.openscada.core.Variant> «this.name» )
{
	this.«this.name» = «this.name»;
}

public java.util.Map<String, org.openscada.core.Variant> «this.getter()»()
{
	return this.«this.name»;
}

«ENDIF»
«ENDDEFINE»

«DEFINE attributeAccess FOR VariantAttribute»
«IF this.list»
private java.util.Collection<org.openscada.core.Variant> «this.name»;

public void «this.setter()»( final java.util.Collection<org.openscada.core.Variant> «this.name» )
{
	this.«this.name» = «this.name»;
}

public java.util.Collection<org.openscada.core.Variant> «this.getter()»()
{
	return this.«this.name»;
}
«ELSE»
private org.openscada.core.Variant «this.name»;

public void «this.setter()»( final org.openscada.core.Variant «this.name» )
{
	this.«this.name» = «this.name»;
}

public org.openscada.core.Variant «this.getter()»()
{
	return this.«this.name»;
}
«ENDIF»
«ENDDEFINE»

«DEFINE fromMessage FOR Entity»
public static «this.name» fromMessage ( final org.openscada.net.base.data.Message message )
{
   «this.name» bean = new «this.name» ();
   
   «EXPAND fromAttribute FOREACH this.attributes»
   
   return bean;
}
«ENDDEFINE»

«DEFINE toMessage FOR Message»
public static org.openscada.net.base.data.Message toMessage ( final «this.name» bean, final org.openscada.net.base.data.Message requestMessage ){
	final org.openscada.net.base.data.Message message;
	if ( requestMessage != null )
		message = new org.openscada.net.base.data.Message ( «this.messageCode», requestMessage.getSequence () );
	else
		message = new org.openscada.net.base.data.Message ( «this.messageCode» );
		
	«EXPAND toAttribute FOREACH this.attributes»
		
	return message;
}
«ENDDEFINE»

«REM»FROM«ENDREM»

«DEFINE fromAttribute FOR Attribute»
«ENDDEFINE»

«DEFINE fromAttribute FOR BasicAttribute»
«IF this.list»
	{
		org.openscada.net.base.data.Value value = message.getValues ().get ( "«this.valueName ()»" );
		if ( value != null && value instanceof org.openscada.net.base.data.ListValue )
		{
			java.util.Collection<«this.type.javaType()»> list = new java.util.LinkedList<«this.type.javaType()»> ();
			
			for ( org.openscada.net.base.data.Value entry : ((org.openscada.net.base.data.ListValue)value).getValues () )
			{ 
				if ( entry instanceof «this.type.gmppType()» )
				{
					list.add ( ((«this.type.gmppType()»)entry).getValue () );
				}
			}
			
			bean.«this.setter()» ( list );
		}
	}
«ELSE»
	{
		org.openscada.net.base.data.Value value = message.getValues ().get ( "«this.valueName ()»" );
		if ( value != null && value instanceof «this.type.gmppType()» )
		{
			bean.«this.setter()» ( ((«this.type.gmppType()»)value).getValue () );
		}
	}
«ENDIF»
«ENDDEFINE»

«DEFINE fromAttribute FOR VariantAttribute»
«IF this.list»
	{
		org.openscada.net.base.data.Value value = message.getValues ().get ( "«this.valueName ()»" );
		if ( value != null && value instanceof org.openscada.net.base.data.ListValue )
		{
			java.util.Collection<org.openscada.core.Variant> list = new java.util.LinkedList<org.openscada.core.Variant> ();
			
			for ( org.openscada.net.base.data.Value entry : ((org.openscada.net.base.data.ListValue)value).getValues () )
			{ 
				list.add ( org.openscada.core.net.MessageHelper.valueToVariant ( entry, new org.openscada.core.Variant () ) );
			}
			
			bean.«this.setter()» ( list );
		}
	}
«ELSE»
    {
    	org.openscada.net.base.data.Value value = message.getValues ().get ( "«this.valueName ()»" );
		bean.«this.setter()» ( org.openscada.core.net.MessageHelper.valueToVariant ( value, new org.openscada.core.Variant () ) );
	}
«ENDIF»
«ENDDEFINE»

«DEFINE fromAttribute FOR MapAttribute»
«IF this.list»
	{
		org.openscada.net.base.data.Value value = message.getValues ().get ( "«this.valueName ()»" );
		if ( value != null && value instanceof org.openscada.net.base.data.MapValue )
		{
			java.util.Collection<org.openscada.core.Variant> list = new java.util.LinkedList<org.openscada.core.Variant> ();
			
			for ( org.openscada.net.base.data.Value entry : ((org.openscada.net.base.data.ListValue)value).getValues () )
			{ 
				if ( entry instanceof org.openscada.net.base.data.MapValue )
			    	{
						bean.«this.setter()» ( org.openscada.core.net.MessageHelper.mapToAttributes ( entry ) );
					}				
			}
			
			bean.«this.setter()» ( list );
		}
	}
«ELSE»
    {
    	org.openscada.net.base.data.Value value = message.getValues ().get ( "«this.valueName ()»" );
    	if ( value instanceof org.openscada.net.base.data.MapValue )
    	{
			bean.«this.setter()» ( org.openscada.core.net.MessageHelper.mapToAttributes ( (org.openscada.net.base.data.MapValue)value ) );
		}
	}
«ENDIF»
«ENDDEFINE»

«DEFINE fromAttribute FOR FlagAttribute»
	bean.«this.setter()» ( message.getValues ().containsKey ( "«this.valueName ()»" ) );
«ENDDEFINE»

«REM»TO«ENDREM»

«DEFINE toAttribute FOR Attribute»
«ENDDEFINE»

«DEFINE toAttribute FOR BasicAttribute»
«IF this.list»
	{
		org.openscada.net.base.data.ListValue listValue = new org.openscada.net.base.data.ListValue ();
		for ( final «this.type.javaType()» entry :   bean.«this.getter()»() )
		{
			listValue.add ( new «this.type.gmppType()» ( entry ) );
		}
		message.getValues ().put ( "«this.valueName ()»", listValue );
	}
«ELSE»
	message.getValues ().put ( "«this.valueName ()»", new «this.type.gmppType()» ( bean.«this.getter()»() ) );
«ENDIF»
«ENDDEFINE»

«DEFINE toAttribute FOR VariantAttribute»
«IF this.list»
	{
		org.openscada.net.base.data.ListValue listValue = new org.openscada.net.base.data.ListValue ();
		for ( final org.openscada.core.Variant entry : bean.«this.getter()»() )
		{
			listValue.add ( org.openscada.core.net.MessageHelper.variantToValue ( entry ) );
		}
		message.getValues ().put ( "«this.valueName ()»", listValue );
	}
«ELSE»
	message.getValues ().put ( "«this.valueName ()»", org.openscada.core.net.MessageHelper.variantToValue ( bean.«this.getter()»() ) );
«ENDIF»
«ENDDEFINE»

«DEFINE toAttribute FOR MapAttribute»
«IF this.list»
	{
		org.openscada.net.base.data.ListValue listValue = new org.openscada.net.base.data.ListValue ();
		for ( final java.util.Map<String,org.openscada.core.Variant> entry : bean.«this.getter()»() )
		{
			listValue.add ( org.openscada.core.net.MessageHelper.attributesToMap ( entry ) );
		}
		message.getValues ().put ( "«this.valueName ()»", listValue );
	}
«ELSE»
	message.getValues ().put ( "«this.valueName ()»", org.openscada.core.net.MessageHelper.attributesToMap ( bean.«this.getter()»() ) );
«ENDIF»

«ENDDEFINE»

«DEFINE toAttribute FOR FlagAttribute»
	if ( bean.«this.getter()» ()  )
	{
		message.getValues ().put ( "«this.valueName ()»", new org.openscada.net.base.data.VoidValue () );
	}
«ENDDEFINE»