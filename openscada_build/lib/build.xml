<?xml version="1.0"?>
<!-- ====================================================================== 
     OpenSCADA Atlantis Build Tools File    
     Providing common build targets for all other ant-scripts
                   
	 Jens Reimann <jens.reimann@inavare.net>
     ====================================================================== -->

<project name="tools">
    <description>
    	Providing common build targets for all other ant-scripts
    </description>

	<import file="libs.xml"/>
	<import file="append-line.xml"/>
	<dirname property="datadir1" file="${ant.file.tools}"/>
	<property name="datadir" location="${datadir1}/../data"/>
	<property name="xmlbeansdir" location="${datadir1}/../xmlbeans"/>
	
	<property name="build.java.source.version" value="1.5"/>
	<property name="build.java.target.version" value="1.5"/>
	<property name="build.java.source.encoding" value="utf-8"/>
	
	<!-- - - - - - - - - - - - - - - - - - 
          macrodef: openscada.unpack-module
          Unpack a deployed module
         - - - - - - - - - - - - - - - - - -->
	<macrodef name="openscada.unpack-module">
		<attribute name="todir"/>
		<attribute name="name"/>
		<sequential>
			<mkdir dir="@{todir}"/>
			<unzip src="${deploy.dist.module}/openscada-@{name}-${tag}.zip" dest="@{todir}">
		    		<patternset>
		    			<include name="lib/*.jar"/>
		    			<include name="bin/*.jar"/>
		    		</patternset>
			</unzip>
		</sequential>
	</macrodef>

	<!-- - - - - - - - - - - - - - - - - - 
          macrodef: openscada.pull-in-lib
          Unpack a deployed archive and copy the libraries into the build-lib folder
         - - - - - - - - - - - - - - - - - -->
    <macrodef name="openscada.pull-in-lib">
    	<attribute name="name"/>
    	<sequential>
	    	<mkdir dir="${build.dir}/${package}/lib"/>
	    	<mkdir dir="${build.dir}/${package}/bin"/>
	    	<unzip src="${deploy.dist.module}/@{name}.zip" dest="${build.dir}/${package}">
	    		<patternset>
	    			<include name="lib/*.jar"/>
	    			<include name="bin/*.jar"/>
	    		</patternset>
	   	</unzip>
    	</sequential>
    </macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.pull-in-external-lib          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.pull-in-external-lib">
        <attribute name="name"/>
        <sequential>
            <openscada.pull-in-lib name="external-@{name}"/>
			<append-line file="${module.dep.file}">&quot;${package}&quot; -&gt; &quot;@{name}&quot;</append-line>
        </sequential>
    </macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.pull-in-module          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.pull-in-module">
        <attribute name="name" />
        <sequential>
        	<openscada.pull-in-lib name="openscada-@{name}-${tag}"/>
			<append-line file="${module.dep.file}">&quot;${package}&quot; -&gt; &quot;@{name}&quot;</append-line>
        </sequential>
    </macrodef>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: openscada.clean                      
         - - - - - - - - - - - - - - - - - -->
    <target name="openscada.clean">
			<delete dir="${build.dir}/${package}-build"/>
    </target>


	<!-- - - - - - - - - - - - - - - - - - 
          macrodef: openscada.prepare-local-libs  
          Copy the local libraries into the build-lib folder                    
         - - - - - - - - - - - - - - - - - -->
    <macrodef name="openscada.prepare-local-libs">
    	<sequential>
    		<mkdir dir="${build.dir}/${package}/lib"/>
			<copy todir="${build.dir}/${package}/lib" failonerror="false">
				<fileset dir="lib">
					<exclude name="**/.svn"/>
				</fileset>
	    	</copy>
    	</sequential>
    </macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.export.license          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.export.license">
        <sequential>
    		<copy file="COPYING" todir="${build.dir}/${package}"/>
        </sequential>
    </macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.export.source          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.export.source">
        <sequential>
    		<mkdir dir="${build.dir}/${package}/src"/>
    		<copy todir="${build.dir}/${package}/src">
    			<fileset dir="src">
    				<exclude name="**/.svn"/>
    			</fileset>
    		</copy>
        </sequential>
    </macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.compile.javadoc          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.compile.javadoc">
        <sequential>
    	   	<mkdir dir="${build.dir}/${package}/docs/api"/>
      		<javadoc destdir="${build.dir}/${package}/docs/api"
    	       	author="true"
    	       	version="true"
    	       	use="true"
    	       	encoding="${build.java.source.encoding}"
    	       	>
    	       	<tag name="note" description="Note" scope="all"/>
    	       	<tag name="warning" description="Warning" scope="all"/>
    	       	<packageset dir="src" defaultexcludes="yes">
    	       		<include name="**"/>
    	       	</packageset>
    			<classpath>
    				<fileset dir="${build.dir}/${package}/lib">
    					<include name="*.jar"/>
    				</fileset>
    				<fileset dir="${build.dir}/${package}/bin">
    					<include name="*.jar"/>
    				</fileset>
    	  		</classpath>
    		</javadoc>
        </sequential>
    </macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.compile.source          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.compile.source">
        <sequential>
			<mkdir dir="${build.dir}/${package}-build/bin"/>
	
			<!-- guild "gensrc" directory if it exists -->
			<if>
				<available type="dir" file="${build.dir}/${package}-build/gensrc"/>
				<then>
					<echo message="Building gensrc"/>
					<javac
						encoding="${build.java.source.encoding}"
						source="${build.java.source.version}"
						target="${build.java.target.version}"
						debug="on"
						destdir="${build.dir}/${package}-build/bin"
						>
						<src path="${build.dir}/${package}-build/gensrc"/>
						<classpath>
							<fileset dir="${build.dir}/${package}/lib">
								<include name="*.jar"/>
							</fileset>
								<fileset dir="${build.dir}/${package}/bin">
									<include name="*.jar"/>
								</fileset>
							<pathelement location="${build.dir}/${package}-build/schemabin"/>
						</classpath>
					</javac>
				</then>
			</if>
    		
    		<javac
    			encoding="${build.java.source.encoding}"
				source="${build.java.source.version}"
				target="${build.java.target.version}"
    			debug="on"
    			destdir="${build.dir}/${package}-build/bin"
    			>
				<src path="src"/>
    			<classpath>
    				<fileset dir="${build.dir}/${package}/lib">
    					<include name="*.jar"/>
    				</fileset>
       				<fileset dir="${build.dir}/${package}/bin">
       					<include name="*.jar"/>
       				</fileset>
    				<pathelement location="${build.dir}/${package}-build/schemabin"/>
					<pathelement location="${build.dir}/${package}-build/bin"/>
    			</classpath>
    		</javac>
        </sequential>
    </macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.common.build          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.common.build">
        <sequential>
        	<openscada.compile.schema/>
    		<openscada.compile.source/>
			<parallel>
	    		<openscada.compile.javadoc/>
	    		<openscada.export.source/>
	    		<openscada.export.license/>
			</parallel>
        </sequential>
    </macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.common.deploy          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.common.deploy">
        <sequential>
    		<mkdir dir="${build.dir}/${package}/bin"/>
			<mkdir dir="${build.dir}/${package}-build/bin"/>
        	<mkdir dir="${build.dir}/${package}-build/schemabin"/>
    		<jar destfile="${build.dir}/${package}/bin/openscada-${package}-${tag}.jar">
    			<fileset dir="${build.dir}/${package}-build/bin">
    				<include name="**/*.class"/>
    				<!-- allow js files for the file simulation server -->
    				<include name="**/*.js"/>
    			</fileset>
    			<fileset dir="${build.dir}/${package}-build/schemabin"/>
    			<manifest>
    		    	<attribute name="Implementation-Vendor" value="inavare GmbH"/>
    				<attribute name="Implementation-Title" value="OpenSCADA Atlantis"/>
    				<attribute name="Implementation-Version" value="${tag}"/>
				</manifest>
    		</jar>

    		<mkdir dir="${deploy.dist.module}"/>
    		<zip basedir="${build.dir}/${package}" destfile="${deploy.dist.module}/openscada-${package}-${tag}.zip">
    			<include name="**/*"/>
    		</zip>
        	
        	<mkdir dir="${deploy.dist.lib}"/>
        	<copy file="${build.dir}/${package}/bin/openscada-${package}-${tag}.jar" todir="${deploy.dist.lib}"/>
	
			<openscada.export.project/>
        </sequential>
    </macrodef>
	
	<!-- included here to use the same version as used in the build -->
	<taskdef name="xmlbean" classname="org.apache.xmlbeans.impl.tool.XMLBean">
		 <classpath id="xmlbeanspath">
            <pathelement location="${xmlbeansdir}/xbean.jar"/>
            <pathelement location="${xmlbeansdir}/jsr173_1.0_api.jar"/>
         </classpath>
	</taskdef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.compile.schema
          Compile the schema files
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.compile.schema">
        <sequential>
        	<if>
        		<available type="dir" file="schema"/>
        		<then>
		        	<mkdir dir="${build.dir}/${package}-build/schemabin"/>
	    	    	<xmlbean
	   					failonerror="true"
	   					classgendir="${build.dir}/${package}-build/schemabin"
						javasource="1.5"
			            classpathref="xmlbeanspath"
						>
							<fileset dir="schema" includes="*.xsd"/>
		        	</xmlbean>
        		</then>
        	</if>
		</sequential>
    </macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.deploy.external          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.deploy.external">
        <sequential>
        	<mkdir dir="${deploy.dist.module}"/>
        	<zip basedir="${build.dir}/${package}" file="${deploy.dist.module}/external-${package}.zip">
        	</zip>
			<openscada.export.project/>
        </sequential>
    </macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.export.project          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.export.project">
    	<attribute name="dir" default="."/>
        <sequential>
			
            <xmltask source="@{dir}/.project">
				<copy path="projectDescription/name/text()" property="project.name"/>
			</xmltask>
        	
        	<property name="pack.dir" location="${temp.dir}/export-project-${project.name}"/>
	
			<!-- copy project files to temp dir -->
			<delete dir="${pack.dir}/${project.name}"/>
			<mkdir dir="${pack.dir}/${project.name}"/>
			<copy todir="${pack.dir}/${project.name}">
				<fileset dir="@{dir}">
					<exclude name="**/.svn"/>
				</fileset>
			</copy>

			<mkdir dir="${deploy.dist.project}"/>
			<zip basedir="${pack.dir}" destfile="${deploy.dist.project}/${project.name}-project-${tag}.zip">
			</zip>
	
			<!-- get the project SVN url -->
			<shellscript shell="bash" dir="@{dir}" outputproperty="svn-base">
				svn info . | grep URL | sed -e "s/URL: //"
			</shellscript>
	
			<xmltask source="${file.genworkspace}" dest="${file.genworkspace}">
				<insert path="project/target[@name='export-list']" xml="&lt;fetch-and-unpack location=&quot;${url.dist.project}/${project.name}-project-${tag}.zip&quot;/&gt;"/>
				<insert path="project/target[@name='export-list-svn']" xml="&lt;checkout url=&quot;${svn-base}&quot; project=&quot;${project.name}&quot;/&gt;"/>
			</xmltask>
	
        </sequential>
    </macrodef>


	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.runfile.transform          
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="openscada.runfile.transform">
		<attribute name="dir"/>
		<sequential>
			<parallel>
				<style classpathref="saxon.classpath" in="@{dir}/runfile.xml" out="@{dir}/run.sh" style="${datadir}/runfile2sh.xsl"/>					
				<style classpathref="saxon.classpath" in="@{dir}/runfile.xml" out="@{dir}/run.bat" style="${datadir}/runfile2bat.xsl"/>
			</parallel>
		</sequential>
	</macrodef>


	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.runfile.arg.add
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="openscada.runfile.arg.add">
		<attribute name="file"/>
		<attribute name="value"/>
		<sequential>
			<xmltask outputter="simple:2" source="@{file}" dest="@{file}">
				<insert path="/run/arguments" xml="&lt;entry&gt;@{value}&lt;/entry&gt;"/>
			</xmltask>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.runfile.set-main
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="openscada.runfile.set-main">
		<attribute name="file"/>
		<attribute name="value"/>
		<sequential>
			<xmltask outputter="simple:2" source="@{file}" dest="@{file}">
				<attr path="/run" attr="main" value="@{value}"/>
			</xmltask>
		</sequential>
	</macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.runfile.gather-jars
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.runfile.gather-jars">
        <attribute name="dir"/>
		<attribute name="file"/>
        <sequential>
			<for param="jar">
				<fileset dir="@{dir}">
					<include name="**/*.jar"/>
				</fileset>
		
				<sequential>
					<!-- remove prefix -->
					<ante:stringutil string="@{dir}/" property="length" xmlns:ante="openscada:/antelope">
						<ante:length/>
					</ante:stringutil>
					<ante:stringutil string="@{jar}" property="jar" xmlns:ante="openscada:/antelope">
						<ante:substring beginindex="${length}"/>
					</ante:stringutil>
					<xmltask outputter="simple:2" source="@{file}" dest="@{file}">
						<insert path="/run/classpath" xml="&lt;entry&gt;${jar}&lt;/entry&gt;"/>
					</xmltask>
				</sequential>
			</for>
        </sequential>
    </macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.runfile.init          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.runfile.init">
        <attribute name="file"/>
        <sequential>
			<xmltask source="${source.base}/openscada_build/data/runfile.xml" dest="@{file}"/>
        </sequential>
    </macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.pde.import-module.init
          Cleans up a previously build import lib jar.
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.pde.import-module.init">
        <sequential>
			<delete file="lib.jar"/>
			<delete dir="lib-jar-build-dir"/>
			<mkdir dir="lib-jar-build-dir"/>
        </sequential>
    </macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.pde.import-module.add-module
          Add the content of a openscada module built during
          the normal build process to this import lib jar for the
          current PDE module.
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.pde.import-module.add-module">
		<attribute name="name"/>
        <sequential>
			<delete dir="extract-module"/>
			<mkdir dir="extract-module"/>
			<unzip overwrite="true" src="${deploy.dist.module}/openscada-@{name}-${tag}.zip" dest="extract-module">
				<patternset>
					<include name="bin/*.jar"/>
				</patternset>
			</unzip>
			<unzip overwrite="true" dest="lib-jar-build-dir">
				<fileset dir="extract-module">
					<include name="**/*.jar"/>
				</fileset>
			</unzip>
			<delete dir="extract-module"/>
        </sequential>
    </macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: openscada.pde.import-module.finalize
          Build the import lib jar. Don't add stuff afterwards.
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="openscada.pde.import-module.finalize">
		<attribute name="destfile"/>
        <sequential>
			<jar basedir="lib-jar-build-dir" destfile="@{destfile}">
			</jar>
        </sequential>
    </macrodef>

</project>
